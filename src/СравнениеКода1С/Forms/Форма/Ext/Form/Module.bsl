
#Область ПрограммныйИнтерфейс

&НаКлиентеНаСервереБезКонтекста 
Функция НомерВерсии() Экспорт
	Возврат "1.4";
КонецФункции

#КонецОбласти

#Область УправлениеФормой

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, ИмяРеквизита)

	Если НЕ Обработано.Найти(ИмяРеквизита) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Обработано.Добавить(ИмяРеквизита);

	Элементы	= Форма.Элементы;
	Объект		= Форма.Объект;
	
	ЭтоРежимОтладки = Элементы.ФормаРежимОтладки.Пометка;

	#Область Наборы
	
	Если ИмяРеквизита = "РеквизитыРежимОтладки" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
		УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, "ОсновнаяПанель");
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Элементы
	
	Если ИмяРеквизита = "ОсновнаяПанель" Тогда
		Отображение = ?(ЭтоРежимОтладки, ОтображениеСтраницФормы.ЗакладкиСверху, ОтображениеСтраницФормы.Нет);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ОсновнаяПанель", "ОтображениеСтраниц", Отображение);
		
		Если НЕ ЭтоРежимОтладки Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ОсновнаяПанель", "ТекущаяСтраница", Элементы.ГруппаОсновная);
		КонецЕсли;
	КонецЕсли;

	#КонецОбласти 

	#Область Команды
	
	//Если ИмяРеквизита = "КомандаЗаполнить" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
	//	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
	//		"ТаблицаФормыЗаполнить", "Видимость", НЕ Объект.Проведен);
	//КонецЕсли;

	#КонецОбласти 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьУсловноеОформление(Форма, ИменаРеквизитов = "")
	Если ТипЗнч(ИменаРеквизитов) = Тип("Строка") Тогда
		Если ПустаяСтрока(ИменаРеквизитов) Тогда
			МассивИмен = Новый Массив;
			МассивИмен.Добавить("");
		Иначе
			МассивИмен = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаРеквизитов, ",");
		КонецЕсли;
	ИначеЕсли ТипЗнч(ИменаРеквизитов) = Тип("Массив") Тогда
		МассивИмен = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ИменаРеквизитов);
	Иначе
		Возврат;
	КонецЕсли;

	Обработано = Новый Массив;
	Для Каждого ИмяРеквизита Из МассивИмен Цикл
		УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, СокрЛП(ИмяРеквизита));
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьОформлениеСтруктурыМодуляНаСервере(знач Форма) Экспорт
	
	Шрифт_Ж = Новый Шрифт(Форма.Элементы.СтруктураМодуля.Шрифт,,, Истина);
	
	#Область ЭтоОбласть
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	ЭлементУО.Использование	= Истина;
	ЭлементУО.Представление	= НСтр("ru='Это строка области'");
	
	// отбор
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЭлементУО.Отбор,
		"СтруктураМодуля.ЭтоОбласть", Истина, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	
	// оформление
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Шрифт_Ж);
	
	// поля
	ДобавитьПоляУсловногоОформления(ЭлементУО.Поля, "СтруктураМодуля");
	#КонецОбласти 

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПутьКМодулю1ПриИзменении(Элемент)
	
	ПрочитатьТекстМодуля("1");
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКМодулю2ПриИзменении(Элемент)
	
	ПрочитатьТекстМодуля("2");
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПутьКМодулю1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЭтотОбъект.ПутьКМодулю1 = Ждать ВыбратьФайлМодуляАсинх();
	ПрочитатьТекстМодуля("1");
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПутьКМодулю2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЭтотОбъект.ПутьКМодулю2 = Ждать ВыбратьФайлМодуляАсинх();
	ПрочитатьТекстМодуля("2");
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстМодуля1ПриИзменении(Элемент)
	
	ОчиститьПодготовленныйТекстМодуля("1");
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстМодуля2ПриИзменении(Элемент)
	
	ОчиститьПодготовленныйТекстМодуля("1");
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрДереваПриИзменении(Элемент)
	
	ОбновитьСтруктуруМодуля();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСтруктурыМодуляПриИзменении(Элемент)
	
	ОбновитьСтруктуруМодуля();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_СтруктураМодуля

&НаКлиенте
Процедура СтруктураМодуляПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.СтруктураМодуля.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СравнитьТексты(ЭтотОбъект, ТекущиеДанные);
	
	УстановитьОтборСтрокСравнения();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Методы

&НаКлиенте
Процедура МетодыПриАктивизацииСтроки(Элемент)
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Документы

&НаКлиенте
Процедура ДокументЛевыйПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.ДокументЛевый.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = ДокументПравый.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор());
	Если СтрокаТаблицы <> Неопределено Тогда
		Элементы.ДокументПравый.ТекущаяСтрока = СтрокаТаблицы.ПолучитьИдентификатор();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДокументПравыйПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.ДокументПравый.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = ДокументЛевый.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор());
	Если СтрокаТаблицы <> Неопределено Тогда
		Элементы.ДокументЛевый.ТекущаяСтрока = СтрокаТаблицы.ПолучитьИдентификатор();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтотОбъект.Заголовок	= СтрШаблон(НСтр("ru='Сравнение модулей (версия %1)'"), НомерВерсии());
	ЭтотОбъект.ФильтрДерева	= 1;
	
	УстановитьОформлениеСтруктурыМодуляНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РежимОтладки(Команда)
	
	Элементы.ФормаРежимОтладки.Пометка = НЕ Элементы.ФормаРежимОтладки.Пометка;
	
	УстановитьУсловноеОформление(ЭтотОбъект, "РеквизитыРежимОтладки");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОбласти(Команда)
	ПроверитьТекстПодготовленный();
	ЗаполнитьТаблицыОбластейМетодов(Истина, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМетоды(Команда)
	ПроверитьТекстПодготовленный();
	ЗаполнитьТаблицыОбластейМетодов(Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтруктуру(Команда)
	ОбновитьСтруктуруМодуля();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСравнение(Команда)
	ПроверитьТекстПодготовленный();
	ЗаполнитьТаблицыОбластейМетодов(Истина, Истина);
	ОбновитьСтруктуруМодуля();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВнешнююСсылку(Команда)
	
	ТекстСсылки = "";
	Если Команда.Имя = "ОткрытьНаИнфостарт" Тогда
		ТекстСсылки = "https://infostart.ru/public/1812778/";
	ИначеЕсли Команда.Имя = "ОткрытьРепозиторий" Тогда
		ТекстСсылки = "https://github.com/vandalsvq/1c_code_diff/";
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстСсылки) Тогда
		Возврат;
	КонецЕсли;
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ТекстСсылки);

КонецПроцедуры

#КонецОбласти

#Область ЗавершениеНемодальныхВызовов
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте 
Процедура ПрочитатьТекстМодуля(знач Сторона)
	ПутьКФайлу = ЭтотОбъект["ПутьКМодулю" + Сторона];
	Если ПустаяСтрока(ПутьКФайлу) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ПутьКФайлу, КодировкаТекста.UTF8);
	ЭтотОбъект["ТекстМодуля" + Сторона] = ТекстовыйДокумент.ПолучитьТекст();
	ТекстовыйДокумент = Неопределено;
	
	ОчиститьПодготовленныйТекстМодуля(Сторона);
КонецПроцедуры

&НаКлиенте 
Процедура ОчиститьПодготовленныйТекстМодуля(знач Сторона)
	ЭтотОбъект["ТекстПодготовленный" + Сторона] = "";
КонецПроцедуры

&НаКлиенте 
Процедура ПроверитьТекстПодготовленный()
	Если ПустаяСтрока(ЭтотОбъект.ТекстПодготовленный1) Тогда
		ЭтотОбъект.ТекстПодготовленный1 = ПодготовитьТекстМодуля(ЭтотОбъект.ТекстМодуля1);
	КонецЕсли;
	
	Если ПустаяСтрока(ЭтотОбъект.ТекстПодготовленный2) Тогда
		ЭтотОбъект.ТекстПодготовленный2 = ПодготовитьТекстМодуля(ЭтотОбъект.ТекстМодуля2);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура УстановитьОтборСтрокСравнения()
	СтруктураОтбор = Новый Структура("КлючСтроки", "БезОтбора");
	
	ТекущиеДанные = Элементы.СтруктураМодуля.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено И НЕ ПустаяСтрока(ТекущиеДанные.КлючСтроки) Тогда
		СтруктураОтбор.КлючСтроки = ТекущиеДанные.КлючСтроки;
	КонецЕсли;
	
	Элементы.ДокументЛевый.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбор);
	Элементы.ДокументПравый.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбор);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура СравнитьТексты(знач Форма, знач СтрокаСтруктуры)
	Если НЕ СтрокаСтруктуры.ЭтоМетод Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаМетода = Форма.Методы.НайтиПоИдентификатору(СтрокаСтруктуры.Идентификатор);
	Если СтрокаМетода.Обработано Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСравнения		= ПодготовитьДанныеСравненияНаКлиенте(Форма, СтрокаМетода);
	Последовательность	= НайтиНаибольшуюПодпоследовательность(ДанныеСравнения);
	РезультатСравнения	= ПолучитьРезультатСравнения(ДанныеСравнения, Последовательность);
	
	ЗаполнитьТаблицыСравнения(Форма, СтрокаМетода, РезультатСравнения);
	
	СтрокаМетода.Обработано = Истина;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ЗаполнитьТаблицыСравнения(знач Форма, знач СтрокаМетода, знач РезультатСравнения)
	//Форма.ДокументЛевый.Очистить();
	//Форма.ДокументПравый.Очистить();
	
	ГраницаРезультата = РезультатСравнения.ВГраница();
	
	Счетчик1 = 0;
	Счетчик2 = 0;
	
	Обработано1 = Новый Массив;
	Обработано2 = Новый Массив;
	
	Для ИндексБлока = 0 По ГраницаРезультата Цикл
		БлокРезультата = РезультатСравнения[ИндексБлока];
		
		СледИндекс	= ИндексБлока + 1;
		ПредИндекс	= ИндексБлока - 1;
		
		СледующийБлок	= ?(СледИндекс <= ГраницаРезультата, РезультатСравнения[СледИндекс], Неопределено);
		ПредыдущийБлок	= ?(ПредИндекс >= 0, РезультатСравнения[ПредИндекс], Неопределено);
		
		ПредКоличество = ?(ПредыдущийБлок = Неопределено, 0, ПредыдущийБлок.Строки1.Количество());
		СледКоличество = ?(СледующийБлок = Неопределено, 0, СледующийБлок.Строки2.Количество());
		
		Если БлокРезультата.Левый Тогда
			ПроверитьБлок = (НЕ СледующийБлок = Неопределено
				И НЕ СледующийБлок.Левый
				И СледующийБлок.Правый
				И СледКоличество > 0);
			
			Для Индекс1 = 0 По БлокРезультата.Строки1.ВГраница() Цикл
				Индекс = БлокРезультата.Строки1[Индекс1];
				Если Обработано1.Найти(Индекс) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
					
				Счетчик1 = Счетчик1 + 1;
				
				Строка1 = Форма.ДокументЛевый.Добавить();
				Строка1.НомерСтроки	= Счетчик1;
				Строка1.Значение	= БлокРезультата.Значения1[Индекс];
				Строка1.Знак		= ?(БлокРезультата.Правый, "", "-");
				Строка1.Тип			= ?(БлокРезультата.Правый, "", "Удалена");
				Строка1.КлючСтроки	= СтрокаМетода.КлючСтроки;
				
				ДополнитьДанныеСтрокиДокумента(Строка1);
				
				Обработано1.Добавить(Индекс);
				
				ДобавитьПустую = НЕ ПроверитьБлок
					ИЛИ Индекс1 >= СледКоличество
					ИЛИ НЕ Обработано2.Найти(СледующийБлок.Строки2[Индекс1]) = Неопределено;
					
				Если НЕ БлокРезультата.Правый И ДобавитьПустую Тогда
					Строка2 = Форма.ДокументПравый.Добавить();
					Строка2.Тип = "Пустая";
					Строка2.КлючСтроки	= СтрокаМетода.КлючСтроки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если БлокРезультата.Правый Тогда    
			ПроверитьБлок = (НЕ ПредыдущийБлок = Неопределено
				И ПредыдущийБлок.Левый
				И НЕ ПредыдущийБлок.Правый
				И ПредКоличество > 0);
			
			Для Индекс2 = 0 По БлокРезультата.Строки2.ВГраница() Цикл
				Индекс = БлокРезультата.Строки2[Индекс2];
				Если Обработано2.Найти(Индекс) <> Неопределено Тогда
					Строка1 = Форма.ДокументЛевый.Добавить();
					Строка1.Тип = "Пустая";
				КонецЕсли;
				
				ДобавитьПустую = НЕ ПроверитьБлок
					ИЛИ Индекс2 >= ПредКоличество
					ИЛИ Обработано1.Найти(ПредыдущийБлок.Строки1[Индекс2]) = Неопределено;
					
				Если НЕ БлокРезультата.Левый И ДобавитьПустую Тогда
					Строка1 = Форма.ДокументЛевый.Добавить();
					Строка1.Тип			= "Пустая";
					Строка1.КлючСтроки	= СтрокаМетода.КлючСтроки;
				КонецЕсли;
				
				Обработано2.Добавить(Индекс);
				
				Счетчик2 = Счетчик2 + 1;
				
				Строка2 = Форма.ДокументПравый.Добавить();
				Строка2.НомерСтроки	= Счетчик2;
				Строка2.Значение	= БлокРезультата.Значения2[Индекс];
				Строка2.Знак		= ?(БлокРезультата.Левый, "", "+");
				Строка2.Тип			= ?(БлокРезультата.Левый, "", "Добавлена");
				Строка2.КлючСтроки	= СтрокаМетода.КлючСтроки;
				
				ДополнитьДанныеСтрокиДокумента(Строка2);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ДополнитьДанныеСтрокиДокумента(знач СтрокаТаблицы)
	
	СтрЗначение = СокрЛП(СтрокаТаблицы.Значение);
	
	СтрокаТаблицы.ЭтоКомментарий	= СтрНачинаетсяС(СтрЗначение, "//");
	СтрокаТаблицы.ЭтоДиректива		= СтрНачинаетсяС(СтрЗначение, "&") ИЛИ СтрНачинаетсяС(СтрЗначение, "#");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ПроверитьКлючСтроки(знач СтрокаТаблицы, знач ИмяПоля)
	Если ЗначениеЗаполнено(СтрокаТаблицы[ИмяПоля]) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы[ИмяПоля] = Строка(Новый УникальныйИдентификатор);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСтрокуДиапазона(знач СтрокаТаблицы, знач ПолеПриемник, знач ПолеИсточник1, знач ПолеИсточник2)
	СтрокаТаблицы[ПолеПриемник] = СтрШаблон("%1 - %2",
		Формат(СтрокаТаблицы[ПолеИсточник1], "ЧН=0; ЧГ="),
		Формат(СтрокаТаблицы[ПолеИсточник2], "ЧН=0; ЧГ="));
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьПоляУсловногоОформления(Поля, знач СписокПолей = "") Экспорт 
	ТипСписокПолей = ТипЗнч(СписокПолей);
	Если ТипСписокПолей = Тип("Строка") Тогда
		МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокПолей, ",", Истина, Истина);
	ИначеЕсли ТипСписокПолей = Тип("Массив") Тогда
		МассивПолей = СписокПолей;
	КонецЕсли;
	
	Для Каждого ИмяПоля Из МассивПолей Цикл
		Поле = Поля.Элементы.Добавить();
		Поле.Использование	= Истина;
		Поле.Поле			= Новый ПолеКомпоновкиДанных(ИмяПоля);
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ВывестиСостояниеОбработки(знач Параметры, знач Пояснение = "", знач Картинка = Неопределено)
	Параметры.Счетчик = Параметры.Счетчик + 1;
	
	ЗначПроцент = ?(Параметры.Количество = 0, 0, Параметры.Счетчик / Параметры.Количество) * 100;
	ЗначПроцент = Цел(ЗначПроцент);
	
	Если Параметры.Процент = ЗначПроцент Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Процент = ЗначПроцент;
	
	#Если Клиент Тогда
		Если ТипЗнч(Картинка) = Тип("Картинка") Тогда
			ЗначКартинка = Картинка;
		ИначеЕсли ТипЗнч(Параметры.Картинка) = Тип("Картинка") Тогда
			ЗначКартинка = Параметры.Картинка;
		Иначе 
			ЗначКартинка = Неопределено;
		КонецЕсли;
		
		Состояние(Параметры.Заголовок, Параметры.Процент, Пояснение, ЗначКартинка);
	#КонецЕсли
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ДобавитьДанныеМодуляВМассив(знач Массив, знач ДанныеМодуля)
	Индекс = Массив.ВГраница();
	
	Если Индекс = -1 Тогда // если массив пустой добавим в конец
		Массив.Добавить(ДанныеМодуля);
	ИначеЕсли Массив[0].НачСтрока > ДанныеМодуля.НачСтрока Тогда // если первая строка больше текущей вставим в начало
		Массив.Вставить(0, ДанныеМодуля);
	ИначеЕсли Массив[Индекс].НачСтрока < ДанныеМодуля.НачСтрока Тогда // если последняя строка меньше текущей добавим в конце
		Массив.Добавить(ДанныеМодуля);
	Иначе // найдем первую строку с меньшим начальным номером строки, вставим послее нее
		Пока Индекс >= 0 Цикл
			Если Массив[Индекс].НачСтрока < ДанныеМодуля.НачСтрока Тогда
				Массив.Вставить(Индекс + 1, ДанныеМодуля);
				Прервать;
			КонецЕсли;
			
			Индекс = Индекс - 1;
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция ВыполнятьАнализСтроки(знач Строка)
	Возврат НЕ ПустаяСтрока(Строка)
		И НЕ СтрНачинаетсяС(Строка, "//");
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ПодготовитьТекстМодуля(знач Текст)
	ЧислоСтрок	= СтрЧислоСтрок(Текст);
	НРегТекст	= НРег(Текст);
	НРегТекст	= СтрЗаменить(НРегТекст, "'", """");
	
	НовыйТекст = Новый Массив;
	Для Индекс = 1 По ЧислоСтрок Цикл
		СтрокаМодуля	= СтрПолучитьСтроку(НРегТекст, Индекс);
		ДлинаСтроки		= СтрДлина(СтрокаМодуля);
		НоваяСтрока		= "";
		
		// заменим ; на #
		СтрокаМодуля = СтрЗаменить(СтрокаМодуля, ";", "#");
		
		// если строка начинается с | значит это строковые символы
		Если СтрНачинаетсяС(СокрЛ(СтрокаМодуля), "|") Тогда
			НачПозиции = СтрНайти(СтрокаМодуля, "|");
			СтрокаМодуля = Лев(СтрокаМодуля, НачПозиции);
			Для НомерСимвола = НачПозиции + 1 По ДлинаСтроки Цикл
				СтрокаМодуля = СтрокаМодуля + "#";
			КонецЦикла;
		КонецЕсли;
		
		// забъем комментарии
		НачКомментарий = СтрНайти(СтрокаМодуля, "//");
		Если НачКомментарий > 0 Тогда
			СтрокаМодуля = Лев(СтрокаМодуля, НачКомментарий + 1);
			Для НомерСимвола = НачКомментарий + 2 По ДлинаСтроки Цикл
				СтрокаМодуля = СтрокаМодуля + "#";
			КонецЦикла;
		КонецЕсли;
		
		// забъем строки
		РазмерСтроки = СтрДлина(СтрокаМодуля);
		НачСтроки = СтрНайти(СтрокаМодуля, """");
		Пока НачСтроки > 0 Цикл
			Если НачСтроки >= РазмерСтроки Тогда
				Прервать;
			КонецЕсли;
			
			НачалоСтроки = Лев(СтрокаМодуля, НачСтроки - 1);
			
			КонСтроки = СтрНайти(СтрокаМодуля, """",, НачСтроки + 1);
			КонСтроки = ?(КонСтроки = 0, ДлинаСтроки, КонСтроки);
			
			Для НомерСимвола = НачСтроки По КонСтроки Цикл
				НачалоСтроки = НачалоСтроки + "#";
			КонецЦикла;
			СтрокаМодуля = НачалоСтроки + Сред(СтрокаМодуля, КонСтроки + 1);
			
			Если КонСтроки = ДлинаСтроки Тогда
				Прервать;
			КонецЕсли;
			
			НачСтроки = СтрНайти(СтрокаМодуля, """",, КонСтроки + 1);
		КонецЦикла;
		
		НовыйТекст.Добавить(СтрокаМодуля);
	КонецЦикла;
	
	Возврат СтрСоединить(НовыйТекст, Символы.ПС);
КонецФункции	

&НаКлиентеНаСервереБезКонтекста 
Функция ПолучитьТекстМодуля(знач Форма, знач СтрокаТаблицы, знач Сторона, знач Подготовленный = Ложь)
	НачСтроки = СтрокаТаблицы["НачСтроки" + Сторона];
	КонСтроки = СтрокаТаблицы["КонСтроки" + Сторона];
	
	ТекстМодуля = Новый Массив;
	Для НомерСтроки = НачСтроки По КонСтроки Цикл
		Если Подготовленный Тогда
			СтрокаМодуля = СтрПолучитьСтроку(Форма["ТекстПодготовленный" + Сторона], НомерСтроки);
		Иначе 
			СтрокаМодуля = СтрПолучитьСтроку(Форма["ТекстМодуля" + Сторона], НомерСтроки);
		КонецЕсли;
		
		ТекстМодуля.Добавить(СтрокаМодуля);
	КонецЦикла;
	
	Возврат СокрЛП(СтрСоединить(ТекстМодуля, Символы.ПС));
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ПолучитьПараметрыСостояния(знач Заголовок, знач Количество, знач Картинка = Неопределено)
	Возврат Новый Структура("Заголовок,Счетчик,Процент,Количество,Картинка",
		Заголовок, 0, 0, Количество, Картинка);
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция НовыйПустойБлокМодуля(знач ПредыдущийБлок = Неопределено)
	ПутьКБлоку		= "";
	КлючРодитель	= "";
	
	Если ТипЗнч(ПредыдущийБлок) = Тип("Структура") Тогда
		ПутьКБлоку = ПредыдущийБлок.ПутьКБлоку
			+ ?(ПустаяСтрока(ПредыдущийБлок.ПутьКБлоку), "", "/")
			+ ПредыдущийБлок.ИмяБлока;
			
		КлючРодитель = ПредыдущийБлок.КлючБлока;
	КонецЕсли;
	
	ПустойБлок = Новый Структура;
	ПустойБлок.Вставить("КлючБлока"		, Строка(Новый УникальныйИдентификатор));
	ПустойБлок.Вставить("КлючРодитель"	, КлючРодитель);

	ПустойБлок.Вставить("Открыт"		, Ложь);
	ПустойБлок.Вставить("НачИмяБлока"	, "");
	ПустойБлок.Вставить("КонИмяБлока"	, "");
	ПустойБлок.Вставить("ИмяБлока"		, "");
	ПустойБлок.Вставить("ПутьКБлоку"	, ПутьКБлоку);
	ПустойБлок.Вставить("НачСтроки"		, 0);
	ПустойБлок.Вставить("НачПозиции"	, 0);
	
	ПустойБлок.Вставить("ЭтоОбласть"		, Ложь);
	ПустойБлок.Вставить("ЭтоМетод"			, Ложь);
	ПустойБлок.Вставить("ЭтоОбластьМетода"	, Ложь);
	ПустойБлок.Вставить("ЭтоАсинх"			, Ложь);
	
	Возврат ПустойБлок;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ЭтоОкончаниеБлока(знач СтрокаАнализ, знач КонИмяБлока)
	ЭтоОкончание = Ложь;
	
	Если СтрНачинаетсяС(СтрокаАнализ, КонИмяБлока) Тогда
		СледСимвол	= Сред(СтрокаАнализ, СтрДлина(КонИмяБлока) + 1, 1);
		КодЗначения = КодСимвола(СледСимвол, 1);
		Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодЗначения) Тогда
			ЭтоОкончание = Истина;
		КонецЕсли;
	ИначеЕсли СтрЗаканчиваетсяНа(СтрокаАнализ, КонИмяБлока) Тогда
		ПредСимвол	= Сред(СтрокаАнализ, СтрДлина(СтрокаАнализ) - СтрДлина(КонИмяБлока) - 1, 1);
		КодЗначения = КодСимвола(ПредСимвол, 1);
		Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодЗначения) Тогда
			ЭтоОкончание = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭтоОкончание;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_СтруктураМодуля

&НаКлиенте 
Процедура ОбновитьСтруктуруМодуля()

	ЭтотОбъект.СтруктураМодуля.ПолучитьЭлементы().Очистить();
	
	КэшМетодов 		= Новый Соответствие;
	КэшРодителей	= Новый Соответствие;
	КэшОбластей		= Новый Соответствие;
	
	ВсеРодители = Новый Массив;
	ОбластиМетодов = Новый Массив;
	Для Каждого СтрокаОбласти Из ЭтотОбъект.Области Цикл
		Если НЕ ПустаяСтрока(СтрокаОбласти.КлючРодитель1) Тогда
			ВсеРодители.Добавить(СтрокаОбласти.КлючРодитель1);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СтрокаОбласти.КлючРодитель2) Тогда
			ВсеРодители.Добавить(СтрокаОбласти.КлючРодитель2);
		КонецЕсли;
	КонецЦикла;
	
	БезОбластей = Новый Массив;
	
	ПараметрыСостояния = ПолучитьПараметрыСостояния(НСтр("ru='Анализ структуры методов'"), ЭтотОбъект.Методы.Количество());
	Для Каждого СтрокаМетода Из ЭтотОбъект.Методы Цикл
		ВывестиСостояниеОбработки(ПараметрыСостояния);
		
		ЗаполнитьСтрокиОбластей(ЭтотОбъект, СтрокаМетода);
		
		ЕстьОбласть1 = ЗначениеЗаполнено(СтрокаМетода.КлючОбласти1);
		ЕстьОбласть2 = ЗначениеЗаполнено(СтрокаМетода.КлючОбласти2);
		
		// Нет фильтра(0), Показывать отличия модулей(1), Показывать измененные(2), Показывать присутствующие только в Файл 1(3), Показывать присутствующие только в Файл 2(4), Показывать неизмененные(5)
		
		ЕстьИзменения = (СтрокаМетода.ЕстьОтличия ИЛИ НЕ ПустаяСтрока(СтрокаМетода.Знак1) ИЛИ НЕ ПустаяСтрока(СтрокаМетода.Знак2));
		ТолькоИзменение = (СтрокаМетода.ЕстьОтличия И ПустаяСтрока(СтрокаМетода.Знак1) И ПустаяСтрока(СтрокаМетода.Знак2));
		
		Если ЭтотОбъект.ФильтрДерева = 1 И НЕ ЕстьИзменения Тогда
			Продолжить;
		ИначеЕсли ЭтотОбъект.ФильтрДерева = 2 И НЕ ТолькоИзменение Тогда
			Продолжить;
		ИначеЕсли ЭтотОбъект.ФильтрДерева = 3 И НЕ СтрокаМетода.Знак1 = "-" Тогда
			Продолжить;
		ИначеЕсли ЭтотОбъект.ФильтрДерева = 4 И НЕ СтрокаМетода.Знак2 = "+" Тогда
			Продолжить;
		ИначеЕсли ЭтотОбъект.ФильтрДерева = 5 И ЕстьИзменения Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ЕстьОбласть1 Тогда
			МассивМетодов = КэшМетодов.Получить(СтрокаМетода.КлючОбласти1);
			Если МассивМетодов = Неопределено Тогда
				МассивМетодов = Новый Массив;
				КэшМетодов.Вставить(СтрокаМетода.КлючОбласти1, МассивМетодов);
			КонецЕсли;
			
			Если МассивМетодов.Найти(СтрокаМетода) = Неопределено Тогда
				МассивМетодов.Добавить(СтрокаМетода);
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьОбласть2 Тогда
			МассивМетодов = КэшМетодов.Получить(СтрокаМетода.КлючОбласти2);
			Если МассивМетодов = Неопределено Тогда
				МассивМетодов = Новый Массив;
				КэшМетодов.Вставить(СтрокаМетода.КлючОбласти2, МассивМетодов);
			КонецЕсли;
			
			Если МассивМетодов.Найти(СтрокаМетода) = Неопределено Тогда
				МассивМетодов.Добавить(СтрокаМетода);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЕстьОбласть1 И НЕ ЕстьОбласть2 Тогда
			БезОбластей.Добавить(СтрокаМетода);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыСостояния = ПолучитьПараметрыСостояния(НСтр("ru='Построение дерева методов'"), ЭтотОбъект.Области.Количество());
	Для Каждого СтрокаОбласти Из ЭтотОбъект.Области Цикл
		ВывестиСостояниеОбработки(ПараметрыСостояния);
		
		ЭтоРодитель = (ВсеРодители.Найти(СтрокаОбласти.КлючОбласти1) <> Неопределено
			ИЛИ ВсеРодители.Найти(СтрокаОбласти.КлючОбласти2) <> Неопределено);
			
		Если ЭтоРодитель Тогда
			КэшРодителей.Вставить(СтрокаОбласти.КлючОбласти1, СтрокаОбласти);
			КэшРодителей.Вставить(СтрокаОбласти.КлючОбласти2, СтрокаОбласти);
		КонецЕсли;
		
		МассивМетодов = КэшМетодов.Получить(СтрокаОбласти.КлючСтроки);
		Если НЕ ТипЗнч(МассивМетодов) = Тип("Массив") Тогда
			МассивМетодов = Новый Массив;
		КонецЕсли;

		Если МассивМетодов.Количество() = 0 И НЕ ЭтоРодитель Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтотОбъект.ВидСтруктурыМодуля = 0 Тогда
			Если ЗначениеЗаполнено(СтрокаОбласти.КлючРодитель1) Тогда
				СтрокаОбластиРодитель = КэшРодителей.Получить(СтрокаОбласти.КлючРодитель1);
			ИначеЕсли ЗначениеЗаполнено(СтрокаОбласти.КлючРодитель2) Тогда
				СтрокаОбластиРодитель = КэшРодителей.Получить(СтрокаОбласти.КлючРодитель2);
			Иначе 
				СтрокаОбластиРодитель = Неопределено;
			КонецЕсли;
			
			Если СтрокаОбластиРодитель <> Неопределено Тогда
				СтрокаРодитель = КэшОбластей.Получить(СтрокаОбластиРодитель.КлючСтроки);
			Иначе 
				СтрокаРодитель = Неопределено;
			КонецЕсли;
			
			Если СтрокаРодитель = Неопределено Тогда
				СтрокаДерева = ЭтотОбъект.СтруктураМодуля.ПолучитьЭлементы().Добавить();
			Иначе 
				СтрокаДерева = СтрокаРодитель.ПолучитьЭлементы().Добавить();
			КонецЕсли;
			
			СтрокаДерева.Идентификатор	= СтрокаОбласти.ПолучитьИдентификатор();
			СтрокаДерева.Имя1			= СтрокаОбласти.ИмяОбласти1;
			СтрокаДерева.Знак1			= СтрокаОбласти.Знак1;
			СтрокаДерева.Строки1		= СтрокаОбласти.Строки1;
			СтрокаДерева.Имя2			= СтрокаОбласти.ИмяОбласти2;
			СтрокаДерева.Знак2			= СтрокаОбласти.Знак2;
			СтрокаДерева.Строки2		= СтрокаОбласти.Строки2;
			СтрокаДерева.ЭтоОбласть		= Истина;
			СтрокаДерева.ЭтоМетод		= Ложь;
			
			СтрокаДерева.КлючОбласти1	= СтрокаОбласти.КлючОбласти1;
			СтрокаДерева.КлючОбласти2	= СтрокаОбласти.КлючОбласти2;
			СтрокаДерева.КлючСтроки		= СтрокаОбласти.КлючСтроки;
		Иначе 
			СтрокаДерева = ЭтотОбъект.СтруктураМодуля;
		КонецЕсли;
		
		Для Каждого СтрокаМетода Из МассивМетодов Цикл
			СтрокаВложенная = СтрокаДерева.ПолучитьЭлементы().Добавить();
			ЗаполнитьСтрокуСтруктурыМодуляИзМетода(СтрокаВложенная, СтрокаМетода);
		КонецЦикла;
		
		КэшОбластей.Вставить(СтрокаОбласти.КлючСтроки, СтрокаДерева);
	КонецЦикла;

	Для Каждого СтрокаМетода Из БезОбластей Цикл
		СтрокаВложенная = ЭтотОбъект.СтруктураМодуля.ПолучитьЭлементы().Добавить();
		ЗаполнитьСтрокуСтруктурыМодуляИзМетода(СтрокаВложенная, СтрокаМетода);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ЗаполнитьСтрокуСтруктурыМодуляИзМетода(знач СтрокаВложенная, знач СтрокаМетода)
	СтрокаВложенная.Идентификатор = СтрокаМетода.ПолучитьИдентификатор();
	
	// файл 1
	СтрокаВложенная.Имя1					= СтрокаМетода.ИмяМетода1;
	СтрокаВложенная.Знак1					= СтрокаМетода.Знак1;
	СтрокаВложенная.Строки1					= СтрокаМетода.Строки1;
	СтрокаВложенная.КлючОбласти1			= СтрокаМетода.КлючОбласти1;
	СтрокаВложенная.ЭтоАсинх1				= СтрокаМетода.ЭтоАсинх1;
	СтрокаВложенная.ЭтоЭкспорт1				= СтрокаМетода.ЭтоЭкспорт1;
	СтрокаВложенная.ДирективаКомпиляции1	= СтрокаМетода.ДирективаКомпиляции1;
	Если НЕ ПустаяСтрока(СтрокаВложенная.Имя1) Тогда
		СтрокаВложенная.ТипМетода1 = ?(СтрокаМетода.ЭтоФункция1, "fn", "pr");
	КонецЕсли;
	
	// файл 2
	СтрокаВложенная.Имя2					= СтрокаМетода.ИмяМетода2;
	СтрокаВложенная.Знак2					= СтрокаМетода.Знак2;
	СтрокаВложенная.Строки2					= СтрокаМетода.Строки2;
	СтрокаВложенная.КлючОбласти2			= СтрокаМетода.КлючОбласти2;
	СтрокаВложенная.ЭтоАсинх2				= СтрокаМетода.ЭтоАсинх2;
	СтрокаВложенная.ЭтоЭкспорт2				= СтрокаМетода.ЭтоЭкспорт2;
	СтрокаВложенная.ДирективаКомпиляции2	= СтрокаМетода.ДирективаКомпиляции2;
	Если НЕ ПустаяСтрока(СтрокаВложенная.Имя1) Тогда
		СтрокаВложенная.ТипМетода2 = ?(СтрокаМетода.ЭтоФункция2, "fn", "pr");
	КонецЕсли;
	
	// общие реквизиты
	СтрокаВложенная.ЭтоОбласть		= Ложь;
	СтрокаВложенная.ЭтоМетод		= Истина;
	СтрокаВложенная.КлючСтроки		= СтрокаМетода.КлючСтроки;
	СтрокаВложенная.ЕстьОтличия		= СтрокаМетода.ЕстьОтличия;
	
	// изменения
	СтрокаВложенная.ОбластьИзменена = СтрокаВложенная.КлючОбласти1 <> СтрокаВложенная.КлючОбласти2;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСтрокиОбластей(знач Форма, знач СтрокаМетода)
	Если ЗначениеЗаполнено(СтрокаМетода.КлючОбласти1) ИЛИ ЗначениеЗаполнено(СтрокаМетода.КлючОбласти2) Тогда
		Возврат;
	КонецЕсли;
	
	Н1 = СтрокаМетода.НачСтроки1;
	К1 = СтрокаМетода.КонСтроки1;
	
	Н2 = СтрокаМетода.НачСтроки2;
	К2 = СтрокаМетода.КонСтроки2;
	
	Область1 = Неопределено;
	Область2 = Неопределено;
	Для Каждого СтрокаОбласти Из Форма.Области Цикл
		Если Н1 >= СтрокаОбласти.НачСтроки1 И К1 <= СтрокаОбласти.КонСтроки1 Тогда
			Область1 = СтрокаОбласти;
		КонецЕсли;
		
		Если Н2 >= СтрокаОбласти.НачСтроки2 И К2 <= СтрокаОбласти.КонСтроки2 Тогда
			Область2 = СтрокаОбласти;
		КонецЕсли;
		
		Если Н1 < СтрокаОбласти.НачСтроки1 И Н2 < СтрокаОбласти.НачСтроки2 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаМетода.КлючОбласти1	= ?(Область1 = Неопределено, "", Область1.КлючСтроки);
	СтрокаМетода.КлючОбласти2	= ?(Область2 = Неопределено, "", Область2.КлючСтроки);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_РаботаСФайлами

&НаКлиенте 
Асинх Функция ВыбратьФайлМодуляАсинх()
	
	РезультатПодключения = Ждать ПодключитьРасширениеДляРаботыСФайлами();
	Если НЕ РезультатПодключения Тогда
		СообщитьОшибкуПодключенияРасширения(, Истина);
		Возврат "";
	КонецЕсли;
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Фильтр	= ФильтрФайловМодульКонфигурации();
	ДиалогВыбора.Заголовок	= НСтр("ru='Выберите файл с текстом модуля'");
	ДиалогВыбора.МножественныйВыбор = Ложь;
	ДиалогВыбора.ПроверятьСуществованиеФайла = Истина;
	Результат = Ждать ДиалогВыбора.ВыбратьАсинх();
	Если НЕ ТипЗнч(Результат) = Тип("Массив") Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Результат[0];
КонецФункции

&НаКлиенте
Асинх Функция ПодключитьРасширениеДляРаботыСФайлами()
	
	#Если НЕ ВебКлиент Тогда
		Возврат Истина;
	#КонецЕсли
	
	РасширениеПодключено = Ждать ПодключитьРасширениеРаботыСФайламиАсинх();
	Если РасширениеПодключено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ЭтоMacOSКлиент() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Расширение для работы с файлами недоступно на MacOS.'"));
		Возврат Ложь;
	КонецЕсли;

	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Установить и продолжить'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Продолжить без установки'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Больше не напоминать'"));
	
	ТекстВопроса = НСтр("ru='Для удобной работы с программой предлагается установить расширение для работы с 1С:Предприятием. 
		|Установить?'");
	
	ОтветПользователя = Ждать ВопросАсинх(ТекстВопроса,
		СписокКнопок,
		30,
		КодВозвратаДиалога.Да,
		НСтр("ru='Установка расширения работы с файлами'"),
		КодВозвратаДиалога.Нет);
		
	Если ОтветПользователя = КодВозвратаДиалога.Да Тогда
		
		Ждать УстановитьРасширениеРаботыСФайламиАсинх();
		
	КонецЕсли;
	
	РасширениеПодключено = Ждать ПодключитьРасширениеРаботыСФайламиАсинх();

	Если РасширениеПодключено Тогда
		Возврат Истина;
	КонецЕсли;
		
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура СообщитьОшибкуПодключенияРасширения(знач КакСообщение = Ложь, знач КакИсключение = Ложь) Экспорт
	Текст = НСтр("ru='Для работы с файлами требуется подключить расширение (недоступно на MacOS).'");
	Если КакСообщение = Истина Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Текст);
	ИначеЕсли КакИсключение = Истина Тогда
		ВызватьИсключение Текст;
	Иначе 
		ПоказатьПредупреждение(, Текст, 30);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ФильтрФайловМодульКонфигурации()
	Возврат НСтр("ru='1С файлы '") + "(*.bsl;*.os;*.txt)|*.bsl;*.os;*.txt";
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ОбластиМетоды

&НаКлиенте 
Процедура ЗаполнитьТаблицыОбластейМетодов(знач ЗаполнитьОбласти = Истина, знач ЗаполнитьМетоды = Истина)
	Массив1 = Новый Массив;
	Массив2 = Новый Массив;
	
	ЗаполнитьМассивОбластейМетодов(ЭтотОбъект, Массив1, "1");
	ЗаполнитьМассивОбластейМетодов(ЭтотОбъект, Массив2, "2");
	
	Если ЗаполнитьОбласти Тогда
		ЗаполнитьТаблицуОбластей(Массив1, Массив2);
	КонецЕсли;
	
	Если ЗаполнитьМетоды Тогда
		ЗаполнитьТаблицуМетодов(Массив1, Массив2);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура ЗаполнитьТаблицуОбластей(знач Массив1, знач Массив2)
	ЭтотОбъект.Области.Очистить();
	
	КэшСтроки = Новый Соответствие;
	
	ПараметрыСостояния = ПолучитьПараметрыСостояния(НСтр("ru='Заполнение областей'"), Массив1.Количество());
	Для Каждого Значение Из Массив1 Цикл
		ВывестиСостояниеОбработки(ПараметрыСостояния);
		
		Если НЕ Значение.ЭтоОбласть Тогда
			Продолжить;
		ИначеЕсли Значение.ЭтоОбластьМетода Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ЭтотОбъект.Области.Добавить();
		СтрокаТаблицы.КлючОбласти1	= Значение.КлючОбласти;
		СтрокаТаблицы.КлючРодитель1	= Значение.КлючРодитель;
		СтрокаТаблицы.ПолноеИмя1	= Значение.ПолноеИмя;
		СтрокаТаблицы.ИмяОбласти1	= Значение.Имя;
		СтрокаТаблицы.ИмяРодитель1	= Значение.ИмяРодитель;
		СтрокаТаблицы.НачСтроки1	= Значение.НачСтрока;
		СтрокаТаблицы.НачПозиции1	= Значение.НачПозиции;
		СтрокаТаблицы.КонСтроки1	= Значение.КонСтрока;
		СтрокаТаблицы.КонПозиции1	= Значение.КонПозиции;
		СтрокаТаблицы.Знак1			= "-";
		
		ПроверитьКлючСтроки(СтрокаТаблицы, "КлючСтроки");
		ЗаполнитьСтрокуДиапазона(СтрокаТаблицы, "Строки1", "НачСтроки1", "КонСтроки1");
		
		КлючИмени = СокрЛП(НРег(Значение.ПолноеИмя));
		КэшСтроки.Вставить(КлючИмени, СтрокаТаблицы);
	КонецЦикла;
	
	ПредИндекс = Неопределено;
	ПараметрыСостояния = ПолучитьПараметрыСостояния(НСтр("ru='Сопоставление областей'"), Массив2.Количество());
	Для Каждого Значение Из Массив2 Цикл
		ВывестиСостояниеОбработки(ПараметрыСостояния);
		
		Если НЕ Значение.ЭтоОбласть Тогда
			Продолжить;
		ИначеЕсли Значение.ЭтоОбластьМетода Тогда
			Продолжить;
		КонецЕсли;
		
		КлючИмени = СокрЛП(НРег(Значение.ПолноеИмя));
		
		СтрокаТаблицы = КэшСтроки.Получить(КлючИмени);
		Если СтрокаТаблицы = Неопределено Тогда
			Если ПредИндекс = Неопределено Тогда
				СтрокаТаблицы = ЭтотОбъект.Области.Добавить();
			Иначе 
				СтрокаТаблицы = ЭтотОбъект.Области.Вставить(ПредИндекс + 1);
			КонецЕсли;
			
			СтрокаТаблицы.Знак2 = "+";
		Иначе 
			ПредИндекс = ЭтотОбъект.Области.Индекс(СтрокаТаблицы);
			
			СтрокаТаблицы.Знак1 = "";
		КонецЕсли;
		
		СтрокаТаблицы.КлючОбласти2	= Значение.КлючОбласти;
		СтрокаТаблицы.КлючРодитель2	= Значение.КлючРодитель;
		СтрокаТаблицы.ПолноеИмя2	= Значение.ПолноеИмя;
		СтрокаТаблицы.ИмяОбласти2	= Значение.Имя;
		СтрокаТаблицы.ИмяРодитель2	= Значение.ИмяРодитель;
		СтрокаТаблицы.НачСтроки2	= Значение.НачСтрока;
		СтрокаТаблицы.НачПозиции2	= Значение.НачПозиции;
		СтрокаТаблицы.КонСтроки2	= Значение.КонСтрока;
		СтрокаТаблицы.КонПозиции2	= Значение.КонПозиции;
		
		ПроверитьКлючСтроки(СтрокаТаблицы, "КлючСтроки");
		ЗаполнитьСтрокуДиапазона(СтрокаТаблицы, "Строки2", "НачСтроки2", "КонСтроки2");
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуМетодов(знач Массив1, знач Массив2) 
	ЭтотОбъект.Методы.Очистить();
	ЭтотОбъект.ДокументЛевый.Очистить();
	ЭтотОбъект.ДокументПравый.Очистить();
	
	КэшСтроки = Новый Соответствие;
	
	ПараметрыСостояния = ПолучитьПараметрыСостояния(НСтр("ru='Заполнение методов'"), Массив1.Количество());
	Для Каждого Значение Из Массив1 Цикл
		ВывестиСостояниеОбработки(ПараметрыСостояния);
		
		Если НЕ Значение.ЭтоМетод Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ЭтотОбъект.Методы.Добавить();
		СтрокаТаблицы.ИмяМетода1	= Значение.Имя;
		СтрокаТаблицы.НачСтроки1	= Значение.НачСтрока;
		СтрокаТаблицы.НачПозиции1	= Значение.НачПозиции;
		СтрокаТаблицы.КонСтроки1	= Значение.КонСтрока;
		СтрокаТаблицы.КонПозиции1	= Значение.КонПозиции;
		СтрокаТаблицы.Знак1			= "-";
		СтрокаТаблицы.ТекстМодуля1	= ПолучитьТекстМодуля(ЭтотОбъект, СтрокаТаблицы, "1");
		СтрокаТаблицы.ЭтоФункция1	= Значение.ЭтоФункция;
		
		СтрокаТаблицы.ЭтоАсинх1				= Значение.ЭтоАсинх;
		СтрокаТаблицы.ЭтоЭкспорт1			= Значение.ЭтоЭкспорт;
		СтрокаТаблицы.ДирективаКомпиляции1	= Значение.ДирективаКомпиляции;
		
		СтрокаТаблицы.ЕстьОтличия	= Истина;
		
		ПроверитьКлючСтроки(СтрокаТаблицы, "КлючСтроки");
		ЗаполнитьСтрокуДиапазона(СтрокаТаблицы, "Строки1", "НачСтроки1", "КонСтроки1");
		
		КлючИмени = СокрЛП(НРег(Значение.Имя));
		КэшСтроки.Вставить(КлючИмени, СтрокаТаблицы);
	КонецЦикла;
	
	ПредИндекс = Неопределено;
	ПараметрыСостояния = ПолучитьПараметрыСостояния(НСтр("ru='Сопоставление методов'"), Массив2.Количество());
	Для Каждого Значение Из Массив2 Цикл
		ВывестиСостояниеОбработки(ПараметрыСостояния);
		
		Если НЕ Значение.ЭтоМетод Тогда
			Продолжить;
		КонецЕсли;
		
		КлючИмени = СокрЛП(НРег(Значение.Имя));
		
		СтрокаТаблицы = КэшСтроки.Получить(КлючИмени);
		Если СтрокаТаблицы = Неопределено Тогда
			Если ПредИндекс = Неопределено Тогда
				СтрокаТаблицы = ЭтотОбъект.Методы.Добавить();
			Иначе 
				СтрокаТаблицы = ЭтотОбъект.Методы.Вставить(ПредИндекс + 1);
			КонецЕсли;
			
			СтрокаТаблицы.Знак2 = "+";
		Иначе 
			СтрокаТаблицы.Знак1 = "";
		КонецЕсли;

		ПредИндекс = ЭтотОбъект.Методы.Индекс(СтрокаТаблицы);
		
		СтрокаТаблицы.ИмяМетода2	= Значение.Имя;
		СтрокаТаблицы.НачСтроки2	= Значение.НачСтрока;
		СтрокаТаблицы.НачПозиции2	= Значение.НачПозиции;
		СтрокаТаблицы.КонСтроки2	= Значение.КонСтрока;
		СтрокаТаблицы.КонПозиции2	= Значение.КонПозиции;
		СтрокаТаблицы.ТекстМодуля2	= ПолучитьТекстМодуля(ЭтотОбъект, СтрокаТаблицы, "2");
		СтрокаТаблицы.ЭтоФункция2	= Значение.ЭтоФункция;
		
		СтрокаТаблицы.ЭтоАсинх2				= Значение.ЭтоАсинх;
		СтрокаТаблицы.ЭтоЭкспорт2			= Значение.ЭтоЭкспорт;
		СтрокаТаблицы.ДирективаКомпиляции2	= Значение.ДирективаКомпиляции;
		
		ПроверитьКлючСтроки(СтрокаТаблицы, "КлючСтроки");
		ЗаполнитьСтрокуДиапазона(СтрокаТаблицы, "Строки2", "НачСтроки2", "КонСтроки2");
		
		СтрокаТаблицы.ЕстьОтличия	= (СтрокаТаблицы.ТекстМодуля1 <> СтрокаТаблицы.ТекстМодуля2);
		СтрокаТаблицы.ТекстМодуля1	= "";
		СтрокаТаблицы.ТекстМодуля2	= "";
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ЗаполнитьМассивОбластейМетодов(знач Форма, знач Массив, знач Сторона)
	ТекстАнализ = Форма["ТекстПодготовленный" + Сторона];
	ТекстМодуля = Форма["ТекстМодуля" + Сторона];
		
	ИменаБлоков = Новый Соответствие;
	ИменаБлоков.Вставить("#область "	, "#конецобласти");
	ИменаБлоков.Вставить("#region "		, "#endregion");
	ИменаБлоков.Вставить("процедура "	, "конецпроцедуры");
	ИменаБлоков.Вставить("procedure "	, "endprocedure");
	ИменаБлоков.Вставить("функция "		, "конецфункции");
	ИменаБлоков.Вставить("function "	, "endfunction");
	
	СтрКонецФункции = СтрРазделить("конецфункции,endfunction", ",");
	
	НачСтроки	= 1;
	КонСтроки	= СтрЧислоСтрок(ТекстАнализ);
	НачПозиции	= 0;
	КонПозиции	= НачПозиции;
	
	ЗаголовокСостояния = СтрШаблон(НСтр("ru='Поиск областей и методов (файл %1)'"), Сторона);
	ПараметрыСостояния = ПолучитьПараметрыСостояния(ЗаголовокСостояния, КонСтроки);
	
	ДанныеБлока = НовыйПустойБлокМодуля();
	ОткрытыеБлоки = Новый Массив;
	
	Для НомерСтроки = НачСтроки По КонСтроки Цикл
		#Если Клиент Тогда
		    ОбработкаПрерыванияПользователя(); 	
		#КонецЕсли

		ВывестиСостояниеОбработки(ПараметрыСостояния);
		
		СтрокаАнализ	= СтрПолучитьСтроку(ТекстАнализ, НомерСтроки);
		СтрокаМодуля	= СтрПолучитьСтроку(ТекстМодуля, НомерСтроки);
		
		НачПозиции		= КонПозиции;
		КонПозиции		= КонПозиции + СтрДлина(СтрокаАнализ);
		
		СтрокаАнализ = СокрЛП(СтрокаАнализ);
		Если НЕ ВыполнятьАнализСтроки(СтрокаАнализ) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоАсинх = Ложь;
		Если СтрНачинаетсяС(СтрокаАнализ, "асинх ") Тогда
			СтрокаАнализ = Сред(СтрокаАнализ, 7);
			ЭтоАсинх = Истина;
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из ИменаБлоков Цикл
			ИмяНачало	= КлючИЗначение.Ключ;
			ИмяКонец	= КлючИЗначение.Значение;
			
			Если СтрНачинаетсяС(СтрокаАнализ, ИмяНачало) Тогда
				ЭтоОбластьМетода = Ложь;
				
				Если ДанныеБлока.Открыт Тогда
					ЭтоОбластьМетода = (ЭтоОбласть(ИмяНачало) И ДанныеБлока.ЭтоМетод);
					
					ДанныеБлока = НовыйПустойБлокМодуля(ДанныеБлока);
				КонецЕсли;
				
				ДанныеБлока.Открыт		= Истина;
				ДанныеБлока.НачИмяБлока	= ИмяНачало;
				ДанныеБлока.КонИмяБлока	= ИмяКонец;
				ДанныеБлока.НачСтроки	= НомерСтроки;
				ДанныеБлока.НачПозиции	= НачПозиции;
				
				ДанныеБлока.ЭтоАсинх			= ЭтоАсинх;
				ДанныеБлока.ЭтоОбласть			= ЭтоОбласть(ИмяНачало);
				ДанныеБлока.ЭтоМетод			= ЭтоМетод(ИмяНачало);
				ДанныеБлока.ЭтоОбластьМетода	= ЭтоОбластьМетода;
				
				Если ДанныеБлока.ЭтоОбласть Тогда
					ДанныеБлока.ИмяБлока = ВыделитьИмяОбласти(СтрокаМодуля, ИмяНачало);
				ИначеЕсли ДанныеБлока.ЭтоМетод Тогда
					ДанныеБлока.ИмяБлока = ВыделитьИмяМетода(СтрокаМодуля, ИмяНачало, ЭтоАсинх);
				КонецЕсли;
				
				ОткрытыеБлоки.Добавить(ДанныеБлока);
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ДанныеБлока.Открыт Тогда
			Если ЭтоОкончаниеБлока(СтрокаАнализ, ДанныеБлока.КонИмяБлока) Тогда
				ПолноеИмя = ДанныеБлока.ПутьКБлоку
					+ ?(ПустаяСтрока(ДанныеБлока.ПутьКБлоку), "", "/")
					+ ДанныеБлока.ИмяБлока;
				
				ДанныеМодуля = Новый Структура;
				ДанныеМодуля.Вставить("Имя"			, ДанныеБлока.ИмяБлока);
				ДанныеМодуля.Вставить("КлючОбласти"	, ДанныеБлока.КлючБлока);
				ДанныеМодуля.Вставить("ИмяРодитель"	, ДанныеБлока.ПутьКБлоку);
				ДанныеМодуля.Вставить("КлючРодитель", ДанныеБлока.КлючРодитель);
				
				ДанныеМодуля.Вставить("ЭтоОбласть"			, ДанныеБлока.ЭтоОбласть);
				ДанныеМодуля.Вставить("ЭтоМетод"			, ДанныеБлока.ЭтоМетод);
				ДанныеМодуля.Вставить("ЭтоОбластьМетода"	, ДанныеБлока.ЭтоОбластьМетода);

				ДанныеМодуля.Вставить("НачСтрока"	, ДанныеБлока.НачСтроки);
				ДанныеМодуля.Вставить("НачПозиции"	, ДанныеБлока.НачПозиции);
				ДанныеМодуля.Вставить("КонСтрока"	, НомерСтроки);
				ДанныеМодуля.Вставить("КонПозиции"	, КонПозиции);
				ДанныеМодуля.Вставить("ПолноеИмя"	, ПолноеИмя);
					
				Если ДанныеБлока.ЭтоМетод Тогда
					ЭтоФункция = (СтрКонецФункции.Найти(ДанныеБлока.КонИмяБлока) <> Неопределено);
					
					ДанныеМодуля.Вставить("ЭтоАсинх"	, ЭтоАсинх);
					ДанныеМодуля.Вставить("ЭтоФункция"	, ЭтоФункция);
						
					ДополнитьДанныеМетода(ТекстМодуля, ТекстАнализ, ДанныеМодуля);
				КонецЕсли;
				
				ДобавитьДанныеМодуляВМассив(Массив, ДанныеМодуля);
				
				ОткрытыеБлоки.Удалить(ОткрытыеБлоки.ВГраница());
				Если ОткрытыеБлоки.Количество() > 0 Тогда
					ДанныеБлока = ОткрытыеБлоки[ОткрытыеБлоки.ВГраница()];
				Иначе 
					ДанныеБлока = НовыйПустойБлокМодуля();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ДополнитьДанныеМетода(знач ТекстМодуля, знач ТекстАнализ, знач ДанныеМетода)
	ДанныеМетода.Вставить("ЭтоЭкспорт"	, Ложь);
	ДанныеМетода.Вставить("ДирективаКомпиляции", "");
	
	ПерваяСтрока = СтрПолучитьСтроку(ТекстАнализ, ДанныеМетода.НачСтрока);
	ПерваяСтрока = СокрЛП(ПерваяСтрока);
	
	Если СтрЗаканчиваетсяНа(ПерваяСтрока, "экспорт") Тогда
		ДанныеМетода.ЭтоЭкспорт = Истина;
	КонецЕсли;

	Если ДанныеМетода.НачСтрока = 1 Тогда
		Возврат;
	КонецЕсли;
	
	// чтение директивы и комментария к процедуре
	МассивКомментарий = Новый Массив;
	
	КонСтрока = ДанныеМетода.НачСтрока;
	Для Индекс = 1 По КонСтрока Цикл
		НомерСтроки = КонСтрока - Индекс;
		
		ПредыдущаяСтрока = СтрПолучитьСтроку(ТекстАнализ, НомерСтроки);
		ПредыдущаяСтрока = СокрЛП(ПредыдущаяСтрока);
		
		ЭтоДиректива	= СтрНачинаетсяС(ПредыдущаяСтрока, "&");
		ЭтоКомментарий	= СтрНачинаетсяС(ПредыдущаяСтрока, "//");
		
		Если НЕ ЭтоДиректива И НЕ ЭтоКомментарий Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаМодуля = СтрПолучитьСтроку(ТекстМодуля, НомерСтроки);
		Если ЭтоДиректива Тогда
			ДанныеМетода.ДирективаКомпиляции = СтрокаМодуля;
		КонецЕсли;
		
		ДанныеМетода.НачСтрока	= НомерСтроки;
		ДанныеМетода.НачПозиции	= ДанныеМетода.НачПозиции - СтрДлина(СтрокаМодуля);
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция ЭтоОбласть(знач ИмяНачало)
	Возврат СтрНайти("#область,#region", СокрЛП(ИмяНачало)) > 0;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ЭтоМетод(знач ИмяНачало)
	Возврат СтрНайти("процедура,procedure,функция,function", СокрЛП(ИмяНачало)) > 0;
КонецФункции
		
&НаКлиентеНаСервереБезКонтекста 
Функция ВыделитьИмяОбласти(знач ТекстОбласти, знач ИмяБлока)
	Текст = Сред(ТекстОбласти, СтрДлина(ИмяБлока) + 1);
	Текст = СокрЛП(Текст);
	
	Для КонИмени = 1 По СтрДлина(Текст) Цикл
		ЗначСимвол = КодСимвола(Текст, КонИмени);
		Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(ЗначСимвол) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СокрЛП(Лев(Текст, КонИмени));
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ВыделитьИмяМетода(знач ТекстМетода, знач ИмяБлока, знач ЭтоАсинх)
	Если ЭтоАсинх Тогда
		ТекстМетода = Сред(ТекстМетода, 7);
	КонецЕсли;
	
	Текст = Сред(ТекстМетода, СтрДлина(ИмяБлока) + 1);
	Текст = СокрЛП(Текст);
	
	Для КонИмени = 1 По СтрДлина(Текст) Цикл
		ЗначСимвол = КодСимвола(Текст, КонИмени);
		Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(ЗначСимвол) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СокрЛП(Лев(Текст, КонИмени - 1));
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_СравнениеТекстов

// алгоритм основан на обработке Инфостарт
// https://infostart.ru/public/581384/
// Автор: Игорь Пашутин

&НаКлиентеНаСервереБезКонтекста 
Процедура ДополнитьРезультатСравненияСтроками(ДанныеСравнения, Результат)
	Для Каждого Блок Из Результат Цикл
		Блок.Вставить("Значения1", Новый Соответствие);
		Блок.Вставить("Значения2", Новый Соответствие);
		
		Для Каждого Индекс Из Блок.Строки1 Цикл
			Блок.Значения1.Вставить(Индекс, ДанныеСравнения.Файл1[Индекс].Текст);
		КонецЦикла;
		
		Для Каждого Индекс Из Блок.Строки2 Цикл
			Блок.Значения2.Вставить(Индекс, ДанныеСравнения.Файл2[Индекс].Текст);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ДобавитьРезультатСравнения(БлокРезультата, Позиция, Сч1, Сч2)
	
	Если БлокРезультата.Левый Тогда
		БлокРезультата.Строки1.Добавить(Сч1);
		Сч1 = Сч1 + 1;
	КонецЕсли;
	
	Если БлокРезультата.Правый Тогда
		БлокРезультата.Строки2.Добавить(Сч2);
		Сч2 = Сч2 + 1;
	КонецЕсли;
	
	Позиция = Позиция + 1;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция ДобавитьБлокРезультатаСравнения(Результат, Тип, Позиция, Сч1, Сч2)
	Структура = Новый Структура;
	Структура.Вставить("Левый"		, СтрНайти(Тип, "Левый") > 0);
	Структура.Вставить("Правый"		, СтрНайти(Тип, "Правый") > 0);
	Структура.Вставить("Позиция"	, Позиция);
	Структура.Вставить("Строки1"	, Новый Массив);
	Структура.Вставить("Строки2"	, Новый Массив);
	
	Если Структура.Левый Тогда
		Структура.Строки1.Добавить(Сч1);
		Сч1 = Сч1 + 1;
	КонецЕсли;
	
	Если Структура.Правый Тогда
		Структура.Строки2.Добавить(Сч2);
		Сч2 = Сч2 + 1;
	КонецЕсли;
	
	Позиция = Позиция + 1;
	
	Результат.Добавить(Структура);
	
	Возврат Структура;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ПолучитьРезультатСравнения(ДанныеСравнения, Последовательность)
	Результат = Новый Массив;
	
	Сч1 = 0;
	Сч2 = 0;
	ПозицияСортировки = 0;
	
	КолПоследовательность	= Последовательность.Количество();
	КоличествоХеш1			= ДанныеСравнения.Хеш1.Количество();
	КоличествоХеш2			= ДанныеСравнения.Хеш2.Количество();
	
	ПозицияСоответствия = 0;
	Пока ПозицияСоответствия < КолПоследовательность Цикл
		#Если Клиент Тогда
		     ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		// левый блок
		Если Последовательность[ПозицияСоответствия].Сч1 > Сч1 Тогда
			БлокРезультата = ДобавитьБлокРезультатаСравнения(Результат,
				"Левый", ПозицияСортировки, Сч1, Сч2);
			
			Пока Последовательность[ПозицияСоответствия].Сч1 > Сч1 Цикл
				ДобавитьРезультатСравнения(БлокРезультата, ПозицияСортировки, Сч1, Сч2);
			КонецЦикла; 
		КонецЕсли;
		
		// правый блок
		Если Последовательность[ПозицияСоответствия].Сч2 > Сч2 Тогда
			БлокРезультата = ДобавитьБлокРезультатаСравнения(Результат,
				"Правый", ПозицияСортировки, Сч1, Сч2);
			
			Пока Последовательность[ПозицияСоответствия].Сч2 > Сч2 Цикл
				ДобавитьРезультатСравнения(БлокРезультата, ПозицияСортировки, Сч1, Сч2);
			КонецЦикла; 
		КонецЕсли;
		
		// с обеих сторон
		БлокРезультата = ДобавитьБлокРезультатаСравнения(Результат, 
			"ЛевыйПравый", ПозицияСортировки, Сч1, Сч2);
		
		Пока ПозицияСоответствия < КолПоследовательность-1 
		   И Последовательность[ПозицияСоответствия + 1].Сч1 = Сч1
		   И Последовательность[ПозицияСоответствия + 1].Сч2 = Сч2 Цикл
		   
			ДобавитьРезультатСравнения(БлокРезультата, ПозицияСортировки, Сч1, Сч2);
			ПозицияСоответствия = ПозицияСоответствия + 1; 
			
		КонецЦикла;
		
		ПозицияСоответствия = ПозицияСоответствия + 1; 
	КонецЦикла; 
		
	Если Сч1 < КоличествоХеш1 Тогда
		БлокРезультата = ДобавитьБлокРезультатаСравнения(Результат,
			"Левый", ПозицияСортировки, Сч1, Сч2);
		
		Пока Сч1 < КоличествоХеш1 Цикл
			ДобавитьРезультатСравнения(БлокРезультата, ПозицияСортировки, Сч1, Сч2);
		КонецЦикла; 
	КонецЕсли;
	
	Если Сч2 < КоличествоХеш2 Тогда
		БлокРезультата = ДобавитьБлокРезультатаСравнения(Результат,
			"Правый", ПозицияСортировки, Сч1, Сч2);
		
		Пока Сч2 < КоличествоХеш2 Цикл
			ДобавитьРезультатСравнения(БлокРезультата, ПозицияСортировки, Сч1, Сч2);
		КонецЦикла; 
	КонецЕсли;
	
	ДополнитьРезультатСравненияСтроками(ДанныеСравнения, Результат);
	
	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ПодготовитьДанныеСравненияНаКлиенте(знач Форма, знач СтрокаМетода)
	ТекстАнализ1	= ПолучитьТекстМодуля(Форма, СтрокаМетода, "1", Истина);
	ТекстАнализ2	= ПолучитьТекстМодуля(Форма, СтрокаМетода, "2", Истина);
	
	ТекстМодуля1	= ПолучитьТекстМодуля(Форма, СтрокаМетода, "1", Ложь);
	ТекстМодуля2	= ПолучитьТекстМодуля(Форма, СтрокаМетода, "2", Ложь);
	
	Результат = Новый Структура("Файл1,Файл2,Хеш1,Хеш2",
		Новый Массив,
		Новый Массив,
		Новый Массив,
		Новый Массив);
		
	КэшСтрок = Новый Соответствие;	
	
	Для Индекс = 1 По СтрЧислоСтрок(ТекстАнализ1) Цикл
		Структура = Новый Структура("Хеш,Значение,Текст");
		Структура.Текст		= СтрПолучитьСтроку(ТекстМодуля1, Индекс);
		Структура.Значение	= ПодготовитьСтрокуДляСравнения(Структура.Текст);
		Структура.Хеш		= НомерСтрокиВКэше(КэшСтрок, Структура.Значение);
		
		Результат.Файл1.Добавить(Структура);
		Результат.Хеш1.Добавить(Структура.Хеш);
	КонецЦикла;
		
	Для Индекс = 1 По СтрЧислоСтрок(ТекстАнализ2) Цикл
		Структура = Новый Структура("Хеш,Значение,Текст");
		Структура.Текст		= СтрПолучитьСтроку(ТекстМодуля2, Индекс);
		Структура.Значение	= ПодготовитьСтрокуДляСравнения(Структура.Текст);
		Структура.Хеш		= НомерСтрокиВКэше(КэшСтрок, Структура.Значение);
		
		Результат.Файл2.Добавить(Структура);
		Результат.Хеш2.Добавить(Структура.Хеш);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ПодготовитьСтрокуДляСравнения(знач Строка)
	Строка = СокрЛП(Строка);
	Строка = НРег(Строка);
	Если СтрНачинаетсяС(Строка, "|") И НЕ СтрЗаканчиваетсяНа(Строка, ",") Тогда
		Строка = Строка + ",";
	КонецЕсли;
	
	Возврат Строка;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция Сравнить(М1, И1, М2, И2) Возврат М1[И1] = М2[И2] КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция СравнитьПоКлючу(М1, И1, М2, И2, Ключ) Возврат М1[И1][Ключ] = М2[И2][Ключ] КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ПодготовитьДанныеИзмененияПоследовательности(ДанныеСравнения)
	М1	= ДанныеСравнения.Хеш1;
	М2	= ДанныеСравнения.Хеш2;
	
	Ф1	= ДанныеСравнения.Файл1;
	Ф2	= ДанныеСравнения.Файл2;
	
	Количество1	= М1.Количество();
	Количество2	= М2.Количество();
	
	// инициализация
	Результат = Новый Массив(Количество2 + 1, Количество1 + 1);
	Результат[0][0] = 0;
	
	// границы
	БылоСовпадение = 0;
	Для Сч = 1 По Количество1 Цикл Если Сравнить(М1, Сч-1, М2, 0) Тогда БылоСовпадение = 1; КонецЕсли; Результат[0][Сч] = 0; Результат[1][Сч] = БылоСовпадение; КонецЦикла;
	
	БылоСовпадение = 0;
	Для Сч = 1 По Количество2 Цикл Если Сравнить(М1, 0, М2, Сч-1) Тогда БылоСовпадение = 1; КонецЕсли; Результат[Сч][0] = 0; Результат[Сч][1] = БылоСовпадение; КонецЦикла;
	
	// остальная таблица
	Для Сч1 = 2 По Количество1 Цикл Для Сч2 = 2 По Количество2 Цикл Если Сравнить(М1, Сч1-1, М2, Сч2-1) И СравнитьПоКлючу(Ф1, Сч1-1, Ф2, Сч2-1, "Хеш") Тогда Результат[Сч2][Сч1] = Результат[Сч2-1][Сч1-1] + 1; Иначе Результат[Сч2][Сч1] = Макс(Результат[Сч2-1][Сч1], Результат[Сч2][Сч1-1]); КонецЕсли; КонецЦикла; КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ВосстановитьПодпоследовательность(ДанныеСравнения, ДанныеИзменения)
	Результат = Новый Массив;
	
	М1	= ДанныеСравнения.Хеш1;
	М2	= ДанныеСравнения.Хеш2;
	
	Сч1 = М1.Количество();
	Сч2 = М2.Количество();
	
	Пока Сч1 > 0 И Сч2 > 0 Цикл
		Если Сравнить(М1,  Сч1-1, М2,  Сч2-1) Тогда
			Структура = Новый Структура("Сч1,Сч2", Сч1-1, Сч2-1);
			Результат.Добавить(Структура);
			
			Сч1 = Структура.Сч1;
			Сч2 = Структура.Сч2;
		Иначе
			Если ДанныеИзменения[Сч2-1][Сч1] = ДанныеИзменения[Сч2][Сч1] Тогда
				Сч2 = Сч2 - 1;
			Иначе
				Сч1 = Сч1 - 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат УпорядочитьПоследовательностьНаСервере(Результат);
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция НайтиНаибольшуюПодпоследовательность(ДанныеСравнения)
	ДанныеИзменения = ПодготовитьДанныеИзмененияПоследовательности(ДанныеСравнения);
	Возврат ВосстановитьПодпоследовательность(ДанныеСравнения, ДанныеИзменения);
КонецФункции

&НаСервереБезКонтекста 
Функция УпорядочитьПоследовательностьНаСервере(знач Массив)
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Сч1",	ОбщегоНазначения.ОписаниеТипаЧисло(10));
	Таблица.Колонки.Добавить("Сч2",	ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	Для Каждого Значение Из Массив Цикл
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), Значение);
	КонецЦикла;
	
	Таблица.Сортировать("Сч1,Сч2");
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Таблица);
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция НомерСтрокиВКэше(знач Кэш, знач Значение)
	НомерСтроки = Кэш.Получить(Значение);
	Если НомерСтроки = Неопределено Тогда
		НомерСтроки = Кэш.Количество();
		Кэш.Вставить(Значение, НомерСтроки);
	КонецЕсли;
	
	Возврат НомерСтроки;
КонецФункции

#КонецОбласти

