
#Область УправлениеФормой

&НаКлиентеНаСервереБезКонтекста 
Процедура А(А = "Процедура А()", В = "КонецПроцедуры") КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПутьКМодулю1ПриИзменении(Элемент)
	
	ПрочитатьТекстМодуля("1");
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКМодулю2ПриИзменении(Элемент)
	
	ПрочитатьТекстМодуля("2");
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПутьКМодулю1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЭтотОбъект.ПутьКМодулю1 = Ждать ВыбратьФайлМодуляАсинх();
	ПрочитатьТекстМодуля("1");
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПутьКМодулю2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЭтотОбъект.ПутьКМодулю2 = Ждать ВыбратьФайлМодуляАсинх();
	ПрочитатьТекстМодуля("2");
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстМодуля1ПриИзменении(Элемент)
	
	ОчиститьПодготовленныйТекстМодуля("1");
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстМодуля2ПриИзменении(Элемент)
	
	ОчиститьПодготовленныйТекстМодуля("1");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Области

&НаКлиенте
Процедура ОбластиПриАктивизацииСтроки(Элемент)
	УстановитьОтборСтрокМетоды();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Области

&НаКлиенте
Процедура МетодыПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.Методы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СравнитьТексты(ЭтотОбъект, ТекущиеДанные);
	
	УстановитьОтборСтрокСравнения();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Документы

&НаКлиенте
Процедура ДокументЛевыйПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.ДокументЛевый.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = ДокументПравый.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор());
	Если СтрокаТаблицы <> Неопределено Тогда
		Элементы.ДокументПравый.ТекущаяСтрока = СтрокаТаблицы.ПолучитьИдентификатор();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДокументПравыйПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.ДокументПравый.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = ДокументЛевый.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор());
	Если СтрокаТаблицы <> Неопределено Тогда
		Элементы.ДокументЛевый.ТекущаяСтрока = СтрокаТаблицы.ПолучитьИдентификатор();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьОбласти(Команда)
	ПроверитьТекстПодготовленный();
	
	ЗаполнитьТаблицуОбластей();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМетоды(Команда)
	ПроверитьТекстПодготовленный();
	
	ЗаполнитьТаблицуМетодов(Истина);
КонецПроцедуры

#КонецОбласти

#Область ЗавершениеНемодальныхВызовов
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте 
Процедура ПрочитатьТекстМодуля(знач Сторона)
	ПутьКФайлу = ЭтотОбъект["ПутьКМодулю" + Сторона];
	Если ПустаяСтрока(ПутьКФайлу) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ПутьКФайлу);
	ЭтотОбъект["ТекстМодуля" + Сторона] = ТекстовыйДокумент.ПолучитьТекст();
	ТекстовыйДокумент = Неопределено;
	
	ОчиститьПодготовленныйТекстМодуля(Сторона);
КонецПроцедуры

&НаКлиенте 
Процедура ОчиститьПодготовленныйТекстМодуля(знач Сторона)
	ЭтотОбъект["ТекстПодготовленный" + Сторона] = "";
КонецПроцедуры

&НаКлиенте 
Процедура ПроверитьТекстПодготовленный()
	Если ПустаяСтрока(ЭтотОбъект.ТекстПодготовленный1) Тогда
		ЭтотОбъект.ТекстПодготовленный1 = ПодготовитьТекстМодуля(ЭтотОбъект.ТекстМодуля1);
	КонецЕсли;
	
	Если ПустаяСтрока(ЭтотОбъект.ТекстПодготовленный2) Тогда
		ЭтотОбъект.ТекстПодготовленный2 = ПодготовитьТекстМодуля(ЭтотОбъект.ТекстМодуля2);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура УстановитьОтборСтрокМетоды()
	//СтруктураОтбор = Новый Структура("КлючОбласти", "0");
	//
	//ТекущиеДанные = Элементы.Области.ТекущиеДанные;
	//Если НЕ ТекущиеДанные = Неопределено Тогда
	//	СтруктураОтбор.КлючОбласти = ТекущиеДанные.КлючОбласти;
	//КонецЕсли;
	//
	//Элементы.Методы.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбор);
КонецПроцедуры

&НаКлиенте 
Процедура УстановитьОтборСтрокСравнения()
	СтруктураОтбор = Новый Структура("КлючМетода", "0");
	
	ТекущиеДанные = Элементы.Методы.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		СтруктураОтбор.КлючМетода = ТекущиеДанные.КлючМетода;
	КонецЕсли;
	
	Элементы.ДокументЛевый.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбор);
	Элементы.ДокументПравый.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбор);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура СравнитьТексты(знач Форма, знач СтрокаМетода)
	Если СтрокаМетода.Обработано Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСравнения		= ПодготовитьДанныеСравненияНаКлиенте(Форма, СтрокаМетода);
	Последовательность	= НайтиНаибольшуюПодпоследовательность(ДанныеСравнения);
	РезультатСравнения	= ПолучитьРезультатСравнения(ДанныеСравнения, Последовательность);
	
	ЗаполнитьТаблицыСравнения(Форма, СтрокаМетода, РезультатСравнения);
	
	СтрокаМетода.Обработано = Истина;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ЗаполнитьТаблицыСравнения(знач Форма, знач СтрокаМетода, знач РезультатСравнения)
	//Форма.ДокументЛевый.Очистить();
	//Форма.ДокументПравый.Очистить();
	
	ГраницаРезультата = РезультатСравнения.ВГраница();
	
	Счетчик1 = 0;
	Счетчик2 = 0;
	
	Обработано1 = Новый Массив;
	Обработано2 = Новый Массив;
	
	Для ИндексБлока = 0 По ГраницаРезультата Цикл
		БлокРезультата = РезультатСравнения[ИндексБлока];
		
		СледИндекс	= ИндексБлока + 1;
		ПредИндекс	= ИндексБлока - 1;
		
		СледующийБлок	= ?(СледИндекс <= ГраницаРезультата, РезультатСравнения[СледИндекс], Неопределено);
		ПредыдущийБлок	= ?(ПредИндекс >= 0, РезультатСравнения[ПредИндекс], Неопределено);
		
		ПредКоличество = ?(ПредыдущийБлок = Неопределено, 0, ПредыдущийБлок.Строки1.Количество());
		СледКоличество = ?(СледующийБлок = Неопределено, 0, СледующийБлок.Строки2.Количество());
		
		Если БлокРезультата.Левый Тогда
			ПроверитьБлок = (НЕ СледующийБлок = Неопределено
				И НЕ СледующийБлок.Левый
				И СледующийБлок.Правый
				И СледКоличество > 0);
			
			Для Индекс1 = 0 По БлокРезультата.Строки1.ВГраница() Цикл
				Индекс = БлокРезультата.Строки1[Индекс1];
				Если Обработано1.Найти(Индекс) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
					
				Счетчик1 = Счетчик1 + 1;
				
				Строка1 = Форма.ДокументЛевый.Добавить();
				Строка1.НомерСтроки	= Счетчик1;
				Строка1.Значение	= БлокРезультата.Значения1[Индекс];
				Строка1.Знак		= ?(БлокРезультата.Правый, "", "-");
				Строка1.Тип			= ?(БлокРезультата.Правый, "", "Удалена");
				Строка1.КлючМетода	= СтрокаМетода.КлючМетода;
				
				Обработано1.Добавить(Индекс);
				
				ДобавитьПустую = НЕ ПроверитьБлок
					ИЛИ Индекс1 >= СледКоличество
					ИЛИ НЕ Обработано2.Найти(СледующийБлок.Строки2[Индекс1]) = Неопределено;
					
				Если НЕ БлокРезультата.Правый И ДобавитьПустую Тогда
					Строка2 = Форма.ДокументПравый.Добавить();
					Строка2.Тип = "Пустая";
					Строка2.КлючМетода	= СтрокаМетода.КлючМетода;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если БлокРезультата.Правый Тогда    
			ПроверитьБлок = (НЕ ПредыдущийБлок = Неопределено
				И ПредыдущийБлок.Левый
				И НЕ ПредыдущийБлок.Правый
				И ПредКоличество > 0);
			
			Для Индекс2 = 0 По БлокРезультата.Строки2.ВГраница() Цикл
				Индекс = БлокРезультата.Строки2[Индекс2];
				Если Обработано2.Найти(Индекс) <> Неопределено Тогда
					Строка1 = Форма.ДокументЛевый.Добавить();
					Строка1.Тип = "Пустая";
				КонецЕсли;
				
				ДобавитьПустую = НЕ ПроверитьБлок
					ИЛИ Индекс2 >= ПредКоличество
					ИЛИ Обработано1.Найти(ПредыдущийБлок.Строки1[Индекс2]) = Неопределено;
					
				Если НЕ БлокРезультата.Левый И ДобавитьПустую Тогда
					Строка1 = Форма.ДокументЛевый.Добавить();
					Строка1.Тип			= "Пустая";
					Строка1.КлючМетода	= СтрокаМетода.КлючМетода;
				КонецЕсли;
				
				Обработано2.Добавить(Индекс);
				
				Счетчик2 = Счетчик2 + 1;
				
				Строка2 = Форма.ДокументПравый.Добавить();
				Строка2.НомерСтроки	= Счетчик2;
				Строка2.Значение	= БлокРезультата.Значения2[Индекс];
				Строка2.Знак		= ?(БлокРезультата.Левый, "", "+");
				Строка2.Тип			= ?(БлокРезультата.Левый, "", "Добавлена");
				Строка2.КлючМетода	= СтрокаМетода.КлючМетода;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ПроверитьКлючСтроки(знач СтрокаТаблицы, знач ИмяПоля)
	Если ЗначениеЗаполнено(СтрокаТаблицы[ИмяПоля]) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы[ИмяПоля] = Строка(Новый УникальныйИдентификатор);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСтрокуДиапазона(знач СтрокаТаблицы, знач ПолеПриемник, знач ПолеИсточник1, знач ПолеИсточник2)
	СтрокаТаблицы[ПолеПриемник] = СтрШаблон("%1 - %2",
		Формат(СтрокаТаблицы[ПолеИсточник1], "ЧН=0; ЧГ="),
		Формат(СтрокаТаблицы[ПолеИсточник2], "ЧН=0; ЧГ="));
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция ПолучитьТекстМодуля(знач Форма, знач СтрокаТаблицы, знач Сторона, знач Подготовленный = Ложь)
	НачСтроки = СтрокаТаблицы["НачСтроки" + Сторона];
	КонСтроки = СтрокаТаблицы["КонСтроки" + Сторона];
	
	ТекстМодуля = Новый Массив;
	Для НомерСтроки = НачСтроки По КонСтроки Цикл
		Если Подготовленный Тогда
			СтрокаМодуля = СтрПолучитьСтроку(Форма["ТекстПодготовленный" + Сторона], НомерСтроки);
		Иначе 
			СтрокаМодуля = СтрПолучитьСтроку(Форма["ТекстМодуля" + Сторона], НомерСтроки);
		КонецЕсли;
		
		ТекстМодуля.Добавить(СтрокаМодуля);
	КонецЦикла;
	
	Возврат СокрЛП(СтрСоединить(ТекстМодуля, Символы.ПС));
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_РаботаСФайлами

&НаКлиенте 
Асинх Функция ВыбратьФайлМодуляАсинх()
	
	РезультатПодключения = Ждать ПодключитьРасширениеДляРаботыСФайлами();
	Если НЕ РезультатПодключения Тогда
		СообщитьОшибкуПодключенияРасширения(, Истина);
		Возврат "";
	КонецЕсли;
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Фильтр	= ФильтрФайловМодульКонфигурации();
	ДиалогВыбора.Заголовок	= НСтр("ru='Выберите файл с текстом модуля'");
	ДиалогВыбора.МножественныйВыбор = Ложь;
	ДиалогВыбора.ПроверятьСуществованиеФайла = Истина;
	Результат = Ждать ДиалогВыбора.ВыбратьАсинх();
	Если НЕ ТипЗнч(Результат) = Тип("Массив") Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Результат[0];
КонецФункции

&НаКлиенте
Асинх Функция ПодключитьРасширениеДляРаботыСФайлами()
	
	#Если НЕ ВебКлиент Тогда
		Возврат Истина;
	#КонецЕсли
	
	РасширениеПодключено = Ждать ПодключитьРасширениеРаботыСФайламиАсинх();
	Если РасширениеПодключено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ЭтоMacOSКлиент() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Расширение для работы с файлами недоступно на MacOS.'"));
		Возврат Ложь;
	КонецЕсли;

	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Установить и продолжить'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Продолжить без установки'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Больше не напоминать'"));
	
	ТекстВопроса = НСтр("ru='Для удобной работы с программой предлагается установить расширение для работы с 1С:Предприятием. 
		|Установить?'");
	
	ОтветПользователя = Ждать ВопросАсинх(ТекстВопроса,
		СписокКнопок,
		30,
		КодВозвратаДиалога.Да,
		НСтр("ru='Установка расширения работы с файлами'"),
		КодВозвратаДиалога.Нет);
		
	Если ОтветПользователя = КодВозвратаДиалога.Да Тогда
		
		Ждать УстановитьРасширениеРаботыСФайламиАсинх();
		
	КонецЕсли;
	
	РасширениеПодключено = Ждать ПодключитьРасширениеРаботыСФайламиАсинх();

	Если РасширениеПодключено Тогда
		Возврат Истина;
	КонецЕсли;
		
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура СообщитьОшибкуПодключенияРасширения(знач КакСообщение = Ложь, знач КакИсключение = Ложь) Экспорт
	Текст = НСтр("ru='Для работы с файлами требуется подключить расширение (недоступно на MacOS).'");
	Если КакСообщение = Истина Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Текст);
	ИначеЕсли КакИсключение = Истина Тогда
		ВызватьИсключение Текст;
	Иначе 
		ПоказатьПредупреждение(, Текст, 30);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ФильтрФайловМодульКонфигурации()
	Возврат НСтр("ru='Модуль конфигурации 1С '") + "(*.bsl)|*.bsl"
		+ "|" + НСтр("ru='Текстовый файл '") + "(*.txt)|*.txt"
		+ "|" + НСтр("ru='Все файлы '") + "(*.*)|*.*";
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Области

&НаКлиенте 
Процедура ЗаполнитьТаблицуОбластей()
	ЭтотОбъект.Области.Очистить();
	
	Массив1 = Новый Массив;
	Массив2 = Новый Массив;
	
	ЗаполнитьМассивОбластей(ЭтотОбъект, Массив1, "1");
	ЗаполнитьМассивОбластей(ЭтотОбъект, Массив2, "2");
	
	КэшСтроки = Новый Соответствие;
	
	Для Каждого Значение Из Массив1 Цикл
		СтрокаТаблицы = ЭтотОбъект.Области.Добавить();
		СтрокаТаблицы.ПолноеИмя1	= Значение.ПолноеИмя;
		СтрокаТаблицы.ИмяОбласти1	= Значение.Имя;
		СтрокаТаблицы.ИмяРодитель1	= Значение.ИмяРодитель;
		СтрокаТаблицы.НачСтроки1	= Значение.НачСтрока;
		СтрокаТаблицы.НачПозиции1	= Значение.НачПозиции;
		СтрокаТаблицы.КонСтроки1	= Значение.КонСтрока;
		СтрокаТаблицы.КонПозиции1	= Значение.КонПозиции;
		СтрокаТаблицы.Знак1			= "-";
		
		ПроверитьКлючСтроки(СтрокаТаблицы, "КлючОбласти");
		ЗаполнитьСтрокуДиапазона(СтрокаТаблицы, "Строки1", "НачСтроки1", "КонСтроки1");
		
		КлючИмени = СокрЛП(НРег(Значение.ПолноеИмя));
		КэшСтроки.Вставить(КлючИмени, СтрокаТаблицы);
	КонецЦикла;
	
	ПредИндекс = Неопределено;
	Для Каждого Значение Из Массив2 Цикл
		КлючИмени = СокрЛП(НРег(Значение.ПолноеИмя));
		
		СтрокаТаблицы = КэшСтроки.Получить(КлючИмени);
		Если СтрокаТаблицы = Неопределено Тогда
			Если ПредИндекс = Неопределено Тогда
				СтрокаТаблицы = ЭтотОбъект.Области.Добавить();
			Иначе 
				СтрокаТаблицы = ЭтотОбъект.Области.Вставить(ПредИндекс + 1);
			КонецЕсли;
			
			СтрокаТаблицы.Знак2 = "+";
		Иначе 
			ПредИндекс = ЭтотОбъект.Области.Индекс(СтрокаТаблицы);
			
			СтрокаТаблицы.Знак1 = "";
		КонецЕсли;
		
		СтрокаТаблицы.ПолноеИмя2	= Значение.ПолноеИмя;
		СтрокаТаблицы.ИмяОбласти2	= Значение.Имя;
		СтрокаТаблицы.ИмяРодитель2	= Значение.ИмяРодитель;
		СтрокаТаблицы.НачСтроки2	= Значение.НачСтрока;
		СтрокаТаблицы.НачПозиции2	= Значение.НачПозиции;
		СтрокаТаблицы.КонСтроки2	= Значение.КонСтрока;
		СтрокаТаблицы.КонПозиции2	= Значение.КонПозиции;
		
		ПроверитьКлючСтроки(СтрокаТаблицы, "КлючОбласти");
		ЗаполнитьСтрокуДиапазона(СтрокаТаблицы, "Строки2", "НачСтроки2", "КонСтроки2");
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ЗаполнитьМассивОбластей(знач Форма, знач Массив, знач Сторона)
	ТекстАнализ = Форма["ТекстПодготовленный" + Сторона];
	ТекстМодуля = Форма["ТекстМодуля" + Сторона];
		
	ИмяНачало	= "#область ";
	ИмяКонец	= "#конецобласти";
	ЧислоСтрок	= СтрЧислоСтрок(ТекстАнализ);
	
	ПредИндекс	= -1;
	ТекИндекс	= -1;
	
	НачПозиции = 0;
	КонПозиции = 0;
	Для Индекс = 1 По ЧислоСтрок Цикл
		СтрокаАнализ	= СтрПолучитьСтроку(ТекстАнализ, Индекс);
		СтрокаМодуля	= СтрПолучитьСтроку(ТекстМодуля, Индекс);
		
		НачПозиции		= КонПозиции;
		КонПозиции		= КонПозиции + СтрДлина(СтрокаАнализ);
		
		СтрокаАнализ = СокрЛП(СтрокаАнализ);
		Если ПустаяСтрока(СтрокаАнализ) ИЛИ СтрНачинаетсяС(СтрокаАнализ, "//#") Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНачинаетсяС(СтрокаАнализ, ИмяНачало) Тогда
			СтрокаМодуля = Сред(СтрокаМодуля, СтрДлина(ИмяНачало) + 1);
			
			Структура = Новый Структура("Имя,ИмяРодитель,ПолноеИмя,НачСтрока,НачПозиции,КонСтрока,КонПозиции");
			Структура.Имя			= ВыделитьИмяОбласти(СтрокаМодуля);
			Структура.ИмяРодитель	= ПолучитьИмяОбластиРодитель(Массив);
			Структура.ПолноеИмя		= Структура.ИмяРодитель + ?(ПустаяСтрока(Структура.ИмяРодитель), "", "/") + Структура.Имя;
			Структура.НачСтрока		= Индекс;
			Структура.НачПозиции	= НачПозиции;
			Структура.КонСтрока		= 0;
			Структура.КонПозиции	= КонПозиции;
			
			Если СтрЗаканчиваетсяНа(СтрокаАнализ, ИмяКонец) Тогда
				Структура.КонСтрока = Индекс;
			КонецЕсли;
			
			Массив.Добавить(Структура);
		КонецЕсли;
		
		Если СтрокаАнализ = ИмяКонец Тогда
			ИндексОбласти = Массив.ВГраница();
			Пока ИндексОбласти >= 0 Цикл
				Если Массив[ИндексОбласти].КонСтрока = 0 Тогда
					Массив[ИндексОбласти].КонПозиции	= КонПозиции;
					Массив[ИндексОбласти].КонСтрока		= Индекс;
					Прервать;
				КонецЕсли;
				
				ИндексОбласти = ИндексОбласти - 1;
			КонецЦикла;			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция ВыделитьИмяОбласти(знач ТекстОбласти)
	Для КонИмени = 1 По СтрДлина(ТекстОбласти) Цикл
		ЗначСимвол = КодСимвола(ТекстОбласти, КонИмени);
		Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(ЗначСимвол) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СокрЛП(Лев(ТекстОбласти, КонИмени));
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ПолучитьИмяОбластиРодитель(знач Массив)
	ИндексОбласти = Массив.ВГраница();
	Пока ИндексОбласти >= 0 Цикл
		Если Массив[ИндексОбласти].КонСтрока = 0 Тогда
			Возврат Массив[ИндексОбласти].ПолноеИмя;
		КонецЕсли;
		
		ИндексОбласти = ИндексОбласти - 1;
	КонецЦикла;			
	
	Возврат "";
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Методы

&НаКлиенте
Процедура ЗаполнитьТаблицуМетодов(знач ВсеОбласти = Истина) 
	ЭтотОбъект.Методы.Очистить();
	ЭтотОбъект.ДокументЛевый.Очистить();
	ЭтотОбъект.ДокументПравый.Очистить();
	
	Массив1 = Новый Массив;
	Массив2 = Новый Массив;
	
	ЗаполнитьМассивМетодов(ЭтотОбъект, Массив1, "1");
	ЗаполнитьМассивМетодов(ЭтотОбъект, Массив2, "2");
	
	КэшСтроки = Новый Соответствие;
	
	Для Каждого Значение Из Массив1 Цикл
		СтрокаТаблицы = ЭтотОбъект.Методы.Добавить();
		СтрокаТаблицы.ИмяМетода1	= Значение.Имя;
		СтрокаТаблицы.КлючОбласти	= Значение.КлючОбласти;
		СтрокаТаблицы.НачСтроки1	= Значение.НачСтрока;
		СтрокаТаблицы.НачПозиции1	= Значение.НачПозиции;
		СтрокаТаблицы.КонСтроки1	= Значение.КонСтрока;
		СтрокаТаблицы.КонПозиции1	= Значение.КонПозиции;
		СтрокаТаблицы.Знак1			= "-";
		СтрокаТаблицы.ТекстМодуля1	= ПолучитьТекстМодуля(ЭтотОбъект, СтрокаТаблицы, "1");
		СтрокаТаблицы.ЕстьОтличия	= Истина;
		
		ПроверитьКлючСтроки(СтрокаТаблицы, "КлючМетода");
		ЗаполнитьСтрокуДиапазона(СтрокаТаблицы, "Строки1", "НачСтроки1", "КонСтроки1");
		
		КлючИмени = СокрЛП(НРег(Значение.Имя));
		КэшСтроки.Вставить(КлючИмени, СтрокаТаблицы);
	КонецЦикла;
	
	ПредИндекс = Неопределено;
	Для Каждого Значение Из Массив2 Цикл
		КлючИмени = СокрЛП(НРег(Значение.Имя));
		
		СтрокаТаблицы = КэшСтроки.Получить(КлючИмени);
		Если СтрокаТаблицы = Неопределено Тогда
			Если ПредИндекс = Неопределено Тогда
				СтрокаТаблицы = ЭтотОбъект.Методы.Добавить();
			Иначе 
				СтрокаТаблицы = ЭтотОбъект.Методы.Вставить(ПредИндекс + 1);
			КонецЕсли;
			
			СтрокаТаблицы.Знак2 = "+";
		Иначе 
			ПредИндекс = ЭтотОбъект.Методы.Индекс(СтрокаТаблицы);
			
			СтрокаТаблицы.Знак1 = "";
		КонецЕсли;
		
		СтрокаТаблицы.ИмяМетода2	= Значение.Имя;
		СтрокаТаблицы.КлючОбласти	= Значение.КлючОбласти;
		СтрокаТаблицы.НачСтроки2	= Значение.НачСтрока;
		СтрокаТаблицы.НачПозиции2	= Значение.НачПозиции;
		СтрокаТаблицы.КонСтроки2	= Значение.КонСтрока;
		СтрокаТаблицы.КонПозиции2	= Значение.КонПозиции;
		СтрокаТаблицы.ТекстМодуля2	= ПолучитьТекстМодуля(ЭтотОбъект, СтрокаТаблицы, "2");
		
		ПроверитьКлючСтроки(СтрокаТаблицы, "КлючМетода");
		ЗаполнитьСтрокуДиапазона(СтрокаТаблицы, "Строки2", "НачСтроки2", "КонСтроки2");
		
		СтрокаТаблицы.ЕстьОтличия	= (СтрокаТаблицы.ТекстМодуля1 <> СтрокаТаблицы.ТекстМодуля2);
		СтрокаТаблицы.ТекстМодуля1	= "";
		СтрокаТаблицы.ТекстМодуля2	= "";
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ЗаполнитьМассивМетодов(знач Форма, знач Массив, знач Сторона)
	ТекстАнализ = Форма["ТекстПодготовленный" + Сторона];
	ТекстМодуля = Форма["ТекстМодуля" + Сторона];
	
	МассивНачало	= СтрРазделить("процедура ,функция ", ",");
	МассивКонец		= СтрРазделить("конецпроцедуры,конецфункции", ",");
	
	КлючОбласти	= ""; //СтрокаОбласти.КлючОбласти;
	НачСтроки	= 1;
	КонСтроки	= СтрЧислоСтрок(ТекстАнализ);
	НачПозиции	= 0;
	КонПозиции	= НачПозиции;

	ТекНачало	= "";
	ТекКонец	= "";
	
	Для Индекс = НачСтроки По КонСтроки Цикл
		СтрокаАнализ	= СтрПолучитьСтроку(ТекстАнализ, Индекс);
		СтрокаМодуля	= СтрПолучитьСтроку(ТекстМодуля, Индекс);
		
		НачПозиции	= КонПозиции;
		КонПозиции	= КонПозиции + СтрДлина(СтрокаАнализ);
		
		СтрокаАнализ = СокрЛП(СтрокаАнализ);
		Если ПустаяСтрока(СтрокаАнализ) ИЛИ СтрНачинаетсяС(СтрокаАнализ, "//#") Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНачинаетсяС(СтрокаАнализ, "асинх ") Тогда
			СтрокаАнализ = Сред(СтрокаАнализ, 7);
		КонецЕсли;
		
		Для ИндексПодстроки = 0 По МассивНачало.ВГраница() Цикл
			ИмяНачало = МассивНачало[ИндексПодстроки];
			ИмяКонец = МассивКонец[ИндексПодстроки];
			
			Если НЕ СтрНачинаетсяС(СтрокаАнализ, ИмяНачало) Тогда
				Продолжить;
			КонецЕсли;
			
			ТекНачало	= ИмяНачало;
			ТекКонец	= ИмяКонец;
			
			СтрокаМодуля = Сред(СтрокаМодуля, СтрДлина(ИмяНачало) + 1);
			
			Структура = Новый Структура("КлючОбласти,Имя,НачСтрока,НачПозиции,КонСтрока,КонПозиции,КонецМетода");
			Структура.КлючОбласти	= КлючОбласти;
			Структура.Имя			= ВыделитьИмяМетода(СтрокаМодуля);
			Структура.НачСтрока		= Индекс;
			Структура.НачПозиции	= НачПозиции;
			Структура.КонСтрока		= 0;
			Структура.КонПозиции	= КонПозиции;
			Структура.КонецМетода	= ТекКонец;
			
			Если СтрЗаканчиваетсяНа(СтрокаАнализ, ТекКонец) Тогда
				Структура.КонСтрока = Индекс;
			КонецЕсли;
			
			Массив.Добавить(Структура);
		КонецЦикла;
		
		Если СтрокаАнализ = ТекКонец Тогда
			ИндексОбласти = Массив.ВГраница();
			Пока ИндексОбласти >= 0 Цикл
				Если Массив[ИндексОбласти].КонСтрока = 0 Тогда
					Массив[ИндексОбласти].КонПозиции	= КонПозиции;
					Массив[ИндексОбласти].КонСтрока		= Индекс;
					
					Если ИндексОбласти - 1 >= 0 Тогда
						ТекКонец = Массив[ИндексОбласти].КонецМетода;
					Иначе 
						ТекКонец = "";
					КонецЕсли;
					
					Прервать;
				КонецЕсли;
				
				ИндексОбласти = ИндексОбласти - 1;
			КонецЦикла;			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция ВыделитьИмяМетода(знач ТекстМетода)
	Для КонИмени = 1 По СтрДлина(ТекстМетода) Цикл
		ЗначСимвол = КодСимвола(ТекстМетода, КонИмени);
		Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(ЗначСимвол) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СокрЛП(Лев(ТекстМетода, КонИмени - 1));
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ПодготовитьТекстМодуля(знач Текст)
	ЧислоСтрок	= СтрЧислоСтрок(Текст);
	НРегТекст	= НРег(Текст);
	
	НовыйТекст = Новый Массив;
	Для Индекс = 1 По ЧислоСтрок Цикл
		СтрокаМодуля	= СтрПолучитьСтроку(НРегТекст, Индекс);
		ДлинаСтроки		= СтрДлина(СтрокаМодуля);
		НоваяСтрока		= "";
		
		// заменим ; на #
		СтрокаМодуля = СтрЗаменить(СтрокаМодуля, ";", "#");
		
		// если строка начинается с | значит это строковые символы
		Если СтрНачинаетсяС(СокрЛ(СтрокаМодуля), "|") Тогда
			НачПозиции = СтрНайти(СтрокаМодуля, "|");
			СтрокаМодуля = Лев(СтрокаМодуля, НачПозиции);
			Для НомерСимвола = НачПозиции + 1 По ДлинаСтроки Цикл
				СтрокаМодуля = СтрокаМодуля + "#";
			КонецЦикла;
		КонецЕсли;
		
		// забъем комментарии
		НачКомментарий = СтрНайти(СтрокаМодуля, "//");
		Если НачКомментарий > 0 Тогда
			СтрокаМодуля = Лев(СтрокаМодуля, НачКомментарий + 1);
			Для НомерСимвола = НачКомментарий + 2 По ДлинаСтроки Цикл
				СтрокаМодуля = СтрокаМодуля + "#";
			КонецЦикла;
		КонецЕсли;
		
		// забъем строки
		НачСтроки = СтрНайти(СтрокаМодуля, """");
		Пока НачСтроки > 0 Цикл
			НачалоСтроки = Лев(СтрокаМодуля, НачСтроки - 1);
			
			КонСтроки = СтрНайти(СтрокаМодуля, """",, НачСтроки + 1);
			КонСтроки = ?(КонСтроки = 0, ДлинаСтроки, КонСтроки);
			
			Для НомерСимвола = НачСтроки По КонСтроки Цикл
				НачалоСтроки = НачалоСтроки + "#";
			КонецЦикла;
			СтрокаМодуля = НачалоСтроки + Сред(СтрокаМодуля, КонСтроки + 1);
			
			Если КонСтроки = ДлинаСтроки Тогда
				Прервать;
			КонецЕсли;
			
			НачСтроки = СтрНайти(СтрокаМодуля, """",, КонСтроки + 1);
		КонецЦикла;
		
		НовыйТекст.Добавить(СтрокаМодуля);
	КонецЦикла;
	
	Возврат СтрСоединить(НовыйТекст, Символы.ПС);
КонецФункции	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_СравнениеТекстов

// алгоритм основан на обработке Инфостарт
// https://infostart.ru/public/581384/
// Автор: Игорь Пашутин

&НаКлиентеНаСервереБезКонтекста 
Процедура ДополнитьРезультатСравненияСтроками(ДанныеСравнения, Результат)
	Для Каждого Блок Из Результат Цикл
		Блок.Вставить("Значения1", Новый Соответствие);
		Блок.Вставить("Значения2", Новый Соответствие);
		
		Для Каждого Индекс Из Блок.Строки1 Цикл
			Блок.Значения1.Вставить(Индекс, ДанныеСравнения.Файл1[Индекс].Текст);
		КонецЦикла;
		
		Для Каждого Индекс Из Блок.Строки2 Цикл
			Блок.Значения2.Вставить(Индекс, ДанныеСравнения.Файл2[Индекс].Текст);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура ДобавитьРезультатСравнения(БлокРезультата, Позиция, Сч1, Сч2)
	
	Если БлокРезультата.Левый Тогда
		БлокРезультата.Строки1.Добавить(Сч1);
		Сч1 = Сч1 + 1;
	КонецЕсли;
	
	Если БлокРезультата.Правый Тогда
		БлокРезультата.Строки2.Добавить(Сч2);
		Сч2 = Сч2 + 1;
	КонецЕсли;
	
	Позиция = Позиция + 1;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция ДобавитьБлокРезультатаСравнения(Результат, Тип, Позиция, Сч1, Сч2)
	Структура = Новый Структура;
	Структура.Вставить("Левый"		, СтрНайти(Тип, "Левый") > 0);
	Структура.Вставить("Правый"		, СтрНайти(Тип, "Правый") > 0);
	Структура.Вставить("Позиция"	, Позиция);
	Структура.Вставить("Строки1"	, Новый Массив);
	Структура.Вставить("Строки2"	, Новый Массив);
	
	Если Структура.Левый Тогда
		Структура.Строки1.Добавить(Сч1);
		Сч1 = Сч1 + 1;
	КонецЕсли;
	
	Если Структура.Правый Тогда
		Структура.Строки2.Добавить(Сч2);
		Сч2 = Сч2 + 1;
	КонецЕсли;
	
	Позиция = Позиция + 1;
	
	Результат.Добавить(Структура);
	
	Возврат Структура;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ПолучитьРезультатСравнения(ДанныеСравнения, Последовательность)
	Результат = Новый Массив;
	
	Сч1 = 0;
	Сч2 = 0;
	ПозицияСортировки = 0;
	
	КолПоследовательность	= Последовательность.Количество();
	КоличествоХеш1			= ДанныеСравнения.Хеш1.Количество();
	КоличествоХеш2			= ДанныеСравнения.Хеш2.Количество();
	
	ПозицияСоответствия = 0;
	Пока ПозицияСоответствия < КолПоследовательность Цикл
		#Если Клиент Тогда
		     ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		// левый блок
		Если Последовательность[ПозицияСоответствия].Сч1 > Сч1 Тогда
			БлокРезультата = ДобавитьБлокРезультатаСравнения(Результат,
				"Левый", ПозицияСортировки, Сч1, Сч2);
			
			Пока Последовательность[ПозицияСоответствия].Сч1 > Сч1 Цикл
				ДобавитьРезультатСравнения(БлокРезультата, ПозицияСортировки, Сч1, Сч2);
			КонецЦикла; 
		КонецЕсли;
		
		// правый блок
		Если Последовательность[ПозицияСоответствия].Сч2 > Сч2 Тогда
			БлокРезультата = ДобавитьБлокРезультатаСравнения(Результат,
				"Правый", ПозицияСортировки, Сч1, Сч2);
			
			Пока Последовательность[ПозицияСоответствия].Сч2 > Сч2 Цикл
				ДобавитьРезультатСравнения(БлокРезультата, ПозицияСортировки, Сч1, Сч2);
			КонецЦикла; 
		КонецЕсли;
		
		// с обеих сторон
		БлокРезультата = ДобавитьБлокРезультатаСравнения(Результат, 
			"ЛевыйПравый", ПозицияСортировки, Сч1, Сч2);
		
		Пока ПозицияСоответствия < КолПоследовательность-1 
		   И Последовательность[ПозицияСоответствия + 1].Сч1 = Сч1
		   И Последовательность[ПозицияСоответствия + 1].Сч2 = Сч2 Цикл
		   
			ДобавитьРезультатСравнения(БлокРезультата, ПозицияСортировки, Сч1, Сч2);
			ПозицияСоответствия = ПозицияСоответствия + 1; 
			
		КонецЦикла;
		
		ПозицияСоответствия = ПозицияСоответствия + 1; 
	КонецЦикла; 
		
	Если Сч1 < КоличествоХеш1 Тогда
		БлокРезультата = ДобавитьБлокРезультатаСравнения(Результат,
			"Левый", ПозицияСортировки, Сч1, Сч2);
		
		Пока Сч1 < КоличествоХеш1 Цикл
			ДобавитьРезультатСравнения(БлокРезультата, ПозицияСортировки, Сч1, Сч2);
		КонецЦикла; 
	КонецЕсли;
	
	Если Сч2 < КоличествоХеш2 Тогда
		БлокРезультата = ДобавитьБлокРезультатаСравнения(Результат,
			"Правый", ПозицияСортировки, Сч1, Сч2);
		
		Пока Сч2 < КоличествоХеш2 Цикл
			ДобавитьРезультатСравнения(БлокРезультата, ПозицияСортировки, Сч1, Сч2);
		КонецЦикла; 
	КонецЕсли;
	
	ДополнитьРезультатСравненияСтроками(ДанныеСравнения, Результат);
	
	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ПодготовитьДанныеСравненияНаКлиенте(знач Форма, знач СтрокаМетода)
	ТекстАнализ1	= ПолучитьТекстМодуля(Форма, СтрокаМетода, "1", Истина);
	ТекстАнализ2	= ПолучитьТекстМодуля(Форма, СтрокаМетода, "2", Истина);
	
	ТекстМодуля1	= ПолучитьТекстМодуля(Форма, СтрокаМетода, "1", Ложь);
	ТекстМодуля2	= ПолучитьТекстМодуля(Форма, СтрокаМетода, "2", Ложь);
	
	Результат = Новый Структура("Файл1,Файл2,Хеш1,Хеш2",
		Новый Массив,
		Новый Массив,
		Новый Массив,
		Новый Массив);
		
	КэшСтрок = Новый Соответствие;	
	
	Для Индекс = 1 По СтрЧислоСтрок(ТекстАнализ1) Цикл
		Структура = Новый Структура("Хеш,Значение,Текст");
		Структура.Текст		= СтрПолучитьСтроку(ТекстМодуля1, Индекс);
		Структура.Значение	= ПодготовитьСтрокуДляСравнения(Структура.Текст);
		Структура.Хеш		= НомерСтрокиВКэше(КэшСтрок, Структура.Значение);
		
		Результат.Файл1.Добавить(Структура);
		Результат.Хеш1.Добавить(Структура.Хеш);
	КонецЦикла;
		
	Для Индекс = 1 По СтрЧислоСтрок(ТекстАнализ2) Цикл
		Структура = Новый Структура("Хеш,Значение,Текст");
		Структура.Текст		= СтрПолучитьСтроку(ТекстМодуля2, Индекс);
		Структура.Значение	= ПодготовитьСтрокуДляСравнения(Структура.Текст);
		Структура.Хеш		= НомерСтрокиВКэше(КэшСтрок, Структура.Значение);
		
		Результат.Файл2.Добавить(Структура);
		Результат.Хеш2.Добавить(Структура.Хеш);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ПодготовитьСтрокуДляСравнения(знач Строка)
	Строка = СокрЛП(Строка);
	Строка = НРег(Строка);
	Если СтрНачинаетсяС(Строка, "|") И НЕ СтрЗаканчиваетсяНа(Строка, ",") Тогда
		Строка = Строка + ",";
	КонецЕсли;
	
	Возврат Строка;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция Сравнить(М1, И1, М2, И2) Возврат М1[И1] = М2[И2] КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция СравнитьПоКлючу(М1, И1, М2, И2, Ключ) Возврат М1[И1][Ключ] = М2[И2][Ключ] КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ПодготовитьДанныеИзмененияПоследовательности(ДанныеСравнения)
	М1	= ДанныеСравнения.Хеш1;
	М2	= ДанныеСравнения.Хеш2;
	
	Ф1	= ДанныеСравнения.Файл1;
	Ф2	= ДанныеСравнения.Файл2;
	
	Количество1	= М1.Количество();
	Количество2	= М2.Количество();
	
	// инициализация
	Результат = Новый Массив(Количество2 + 1, Количество1 + 1);
	Результат[0][0] = 0;
	
	// границы
	БылоСовпадение = 0;
	Для Сч = 1 По Количество1 Цикл Если Сравнить(М1, Сч-1, М2, 0) Тогда БылоСовпадение = 1; КонецЕсли; Результат[0][Сч] = 0; Результат[1][Сч] = БылоСовпадение; КонецЦикла;
	
	БылоСовпадение = 0;
	Для Сч = 1 По Количество2 Цикл Если Сравнить(М1, 0, М2, Сч-1) Тогда БылоСовпадение = 1; КонецЕсли; Результат[Сч][0] = 0; Результат[Сч][1] = БылоСовпадение; КонецЦикла;
	
	// остальная таблица
	Для Сч1 = 2 По Количество1 Цикл Для Сч2 = 2 По Количество2 Цикл Если Сравнить(М1, Сч1-1, М2, Сч2-1) И СравнитьПоКлючу(Ф1, Сч1-1, Ф2, Сч2-1, "Хеш") Тогда Результат[Сч2][Сч1] = Результат[Сч2-1][Сч1-1] + 1; Иначе Результат[Сч2][Сч1] = Макс(Результат[Сч2-1][Сч1], Результат[Сч2][Сч1-1]); КонецЕсли; КонецЦикла; КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ВосстановитьПодпоследовательность(ДанныеСравнения, ДанныеИзменения)
	Результат = Новый Массив;
	
	М1	= ДанныеСравнения.Хеш1;
	М2	= ДанныеСравнения.Хеш2;
	
	Сч1 = М1.Количество();
	Сч2 = М2.Количество();
	
	Пока Сч1 > 0 И Сч2 > 0 Цикл
		Если Сравнить(М1,  Сч1-1, М2,  Сч2-1) Тогда
			Структура = Новый Структура("Сч1,Сч2", Сч1-1, Сч2-1);
			Результат.Добавить(Структура);
			
			Сч1 = Структура.Сч1;
			Сч2 = Структура.Сч2;
		Иначе
			Если ДанныеИзменения[Сч2-1][Сч1] = ДанныеИзменения[Сч2][Сч1] Тогда
				Сч2 = Сч2 - 1;
			Иначе
				Сч1 = Сч1 - 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат УпорядочитьПоследовательностьНаСервере(Результат);
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция НайтиНаибольшуюПодпоследовательность(ДанныеСравнения)
	ДанныеИзменения = ПодготовитьДанныеИзмененияПоследовательности(ДанныеСравнения);
	Возврат ВосстановитьПодпоследовательность(ДанныеСравнения, ДанныеИзменения);
КонецФункции

&НаСервереБезКонтекста 
Функция УпорядочитьПоследовательностьНаСервере(знач Массив)
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Сч1",	ОбщегоНазначения.ОписаниеТипаЧисло(10));
	Таблица.Колонки.Добавить("Сч2",	ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	Для Каждого Значение Из Массив Цикл
		ЗаполнитьЗначенияСвойств(Таблица.Добавить(), Значение);
	КонецЦикла;
	
	Таблица.Сортировать("Сч1,Сч2");
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(Таблица);
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция НомерСтрокиВКэше(знач Кэш, знач Значение)
	НомерСтроки = Кэш.Получить(Значение);
	Если НомерСтроки = Неопределено Тогда
		НомерСтроки = Кэш.Количество();
		Кэш.Вставить(Значение, НомерСтроки);
	КонецЕсли;
	
	Возврат НомерСтроки;
КонецФункции

#КонецОбласти

